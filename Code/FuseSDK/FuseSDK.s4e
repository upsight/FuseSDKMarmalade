# FuseSDK extension for Marmalade

callbacks 
include:
#include <s3eTypes.h>
#include "cfuhash.h"

// FuseSDK callbacks available for registering
// See docs/Callbacks.txt for a list of parameters for each callback
enum FuseSDKCallback
{
	FUSESDK_SESSION_STARTED,
	FUSESDK_SESSION_LOGIN_ERROR,
	FUSESDK_AD_AVAILABILITY_RESPONSE,
	FUSESDK_AD_DID_SHOW,
	FUSESDK_AD_WILL_CLOSE,
	FUSESDK_AD_FAILED_TO_DISPLAY,
    FUSESDK_OVERLAY_WILL_CLOSE,
	FUSESDK_REWARDED_AD_COMPLETED,
	FUSESDK_IAPOFFER_ACCEPTED,
	FUSESDK_VIRTUALGOODSOFFER_ACCEPTED,
	FUSESDK_NOTIFICATION_ACTION,
	FUSESDK_ACCOUNT_LOGIN_COMPLETE,
	FUSESDK_TIME_UPDATED,
	FUSESDK_GAME_DATA_RECEIVED,
	FUSESDK_GAME_DATA_ERROR,
	FUSESDK_GAME_DATASET_ACKNOWLEDGED,
	FUSESDK_GAME_CONFIGURATION_RECEIVED,
    FUSESDK_PURCHASE_VERIFIED,
	FUSESDK_CALLBACK_MAX,
};

// Account types for account login callback
enum FuseAccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};

// purchase state for registering in-app purchases for iOS
enum FusePurchaseStateiOS 
{ 
	PURCHASING = 0,
	PURCHASED = 1,
	FAILED = 2,
	RESTORED = 3,
};

// purchase state for registering in-app purchases for Android
enum FusePurchaseStateAndroid 
{ 
	PURCHASED_ANDROID = 0,
	CANCELED = 1,
	REFUNDED = 2,
};

// Game Values from game data
struct FuseGameValue
{
	bool isBinary;
	const char* value;
};

/**
// Fuse Event status
enum FuseEvent
{
	FUSE_EVENT_OK = 0, 
	FUSE_EVENT_BAD_VAL = 1,   // the user is not connected to the internet
	FUSE_EVENT_NULL_PARAMETER = 2,
};

enum kFuseGender
{
    FUSE_GENDER_UNKNOWN = 0,        /// gender unknown
    FUSE_GENDER_MALE,               /// gender male
    FUSE_GENDER_FEMALE,             /// gender female
    FUSE_GENDER_UNDECIDED,          /// gender undecided
    FUSE_GENDER_WITHHELD            /// gender withheld
};

// error codes:
enum FuseErrors
{
    FUSE_ERROR_NO_ERROR = 0,			/// No error has occurred.
    FUSE_ERROR_NOT_CONNECTED = 1,       /// The user is not connected to the internet.
    FUSE_ERROR_REQUEST_FAILED = 2,      /// There was an error in establishing a connection with the server.
    FUSE_ERROR_SERVER_ERROR = 3,        /// The request was processed, but an error occured during processing.
    FUSE_ERROR_BAD_DATA = 4,            /// The server has indicated the data it received was not valid.
    FUSE_ERROR_SESSION_FAILURE = 5,     /// The session has recieved an error and the operation did not complete due to this error.
    FUSE_ERROR_INVALID_REQUEST = 6,     /// The request was not valid, and no action will be performed.
};

*/

extern const char* kFuseSDKRewardedAdOptionKey_ShowPreRoll; // set "0" for false or "1" for true
extern const char* kFuseSDKRewardedAdOptionKey_ShowPostRoll; // set "0" for false or "1" for true
extern const char* kFuseSDKRewardedOptionKey_PreRollYesButtonText;
extern const char* kFuseSDKRewardedOptionKey_PreRollNoButtonText;
extern const char* kFuseSDKRewardedOptionKey_PostRollContinueButtonText;

functions:

/**+------------------+
// | Session Creation |
// +------------------*/
/*	
* @brief This function is used to initiate all communication with the Fuse system (and register a FuseCallback)
* @details The startSession function is used to bootstrap all communications with the Fuse system. This should be called at the cold start of the application (application onCreate() method or the main activity onCreate() method).
*
* When a session has been established by Fuse system, a FUSESDK_SESSION_STARTED or FUSESDK_SESSION_LOGIN_ERROR callback will be sent to the registered callback object
*
* @param appID [const char*] This is the 36-character APP ID assigned by the Fuse system.  Your APP ID is generated when you add your App to the Fuse dashboard system.  It can be found in the configuration tab in a specific game, or in the "Integrate API" section of the dashboard.  The APP ID is a 36-digit unique ID of the form 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'.
* @param options [cfuhash_table_t*] This is a list of options to apply to the SDK.  This value can be null.
*
* in FuseSDK/docs/Callbacks.txt:
* @see FUSESDK_SESSION_STARTED for more information on the callback function
* @see FUSESDK_SESSION_LOGIN_ERROR for more information on handling errors occurred when trying to start a session
*/
void FuseSDKStartSession(const char* appID, cfuhash_table_t* options) run_on_os_thread


/*
 internally called by the extension
*/
void FuseSDKPauseSession() run_on_os_thread
/*
 internally called by the extension 
*/
void FuseSDKResumeSession() run_on_os_thread
/*
 internally called by the extension 
*/
void FuseSDKTerminateSession() run_on_os_thread


/*
* @brief This function is used to Setup Google Cloud Messaging service for this app.  
* @details To use this function you must have registered for GCM through Google's API portal: https://code.google.com/apis/console.  A good explanation of GCM can be found here:
* http://developer.android.com/google/gcm/gs.html.
*
* @param GCM_Project_Number [const char*] This is the Project Number obtained after registering for GCM through Google's portal.
*/
void FuseSDKRegisterForPushNotifications(const char* projectID) run_on_os_thread


/**+-----------------------+
// | Fuse Interstitial Ads |
// +-----------------------*/
/*
 * @brief This method indicates whether an ad is available to be shown to the user for the specified ad zone
 * @details This method is optional and can be used to test if an ad is available in the Fuse system before attempting to show an ad to the user.  If an ad is shown without an ad unit available, the window will be dismissed.
 * 
 * The response to this function is sent using the FUSESDK_AD_AVAILABILITY_RESPONSE callback.  See FuseSDK/docs/Callbacks.txt for more details
 *
 * @param zoneID [const char*] the ad zone to check ad availability for.  May be null, will use default ad zone.
 *
 */
 void FuseSDKPreloadAdForZoneID(const char* zoneID) run_on_os_thread

/*
 *  @brief This method returns if an ad was loaded in a particular zone
 *  @details This method is optional and can be used to test if an ad has been loaded and is known to be ready to show by the Fuse system before attempting to show an ad to the user. 
 *      If an ad is shown without an ad unit available, the window will be dismissed.
 *
 @code
 if(FuseSDKIsAdAvailableForZoneID("Level Completed"))
 {
    FuseSDKShowAdForZoneID("Level Completed");
 }
 @endcode
 *
 *
 @param zoneID [const char*] The name of the ad zone to display.  You can configure different zones via the Fuse Dashboard. Will use the default ad zone if set to null.
 */
bool FuseSDKIsAdAvailableForZoneID(const char* zoneID) run_on_os_thread

/*
* @brief This function is used to display a full-screen interstitial ad.
*
* @code
// show ad from default ad zone with no options
FuseSDKShowAdForZoneID(NULL, NULL);

// show ad from Level Completed ad zone with no options
FuseSDKShowAdForZoneID("Level Completed", NULL);

// show ad from Rewarded Video ad zone with a preroll and a postroll message
cfuhash_table_t* options = cfuhash_new_with_initial_size(2);    
//Note: both the key and the value need to be strings
cfuhash_put(options, kFuseSDKRewardedAdOptionKey_ShowPreRoll, "1");
cfuhash_put(options, kFuseSDKRewardedAdOptionKey_ShowPostRoll, "1");
FuseSDKShowAdForZoneID("Rewarded Video", options);

* @endcode
* The following callbacks are available with this function: FUSESDK_AD_DID_SHOW, FUSESDK_AD_WILL_CLOSE, FUSESDK_REWARDED_AD_COMPLETED, FUSESDK_IAPOFFER_ACCEPTED, FUSESDK_VIRTUALGOODSOFFER_ACCEPTED
* See FuseSDK/docs/Callbacks.txt for more details
*
* @param zoneID [const char*] The name of the ad zone to display.  You can configure different zones via the Fuse Dashboard. Will use the default ad zone if set to null.
* @param options [cfuhash_table_t*] Options for showing the ad, like showing the preroll and postroll for rewarded videos. May be null.  See the Ad Option Keys list for available options
*/
void FuseSDKShowAdForZoneID(const char* zoneID, cfuhash_table_t* options) run_on_os_thread

/*
 
 * @brief This method sets the user ID string for rewarded video server verification
 *
 * @details To allow server side verificiation. A user id registered with this function is passed to the server when a rewarded video has been completed. The server then transmits faithfully this id 
    to the 3rd Party server registered on the FusePowered Dashboard. The value is only cached for the duration of the session, and can be changed at any time.
 
 @code
 FuseSDKSetRewardedVideoUserID("bobSmith1994");
 
 */
void FuseSDKSetRewardedVideoUserID(const char* userID) run_on_os_thread


/**+-------------------------+
// | In-App Purchase Logging |
// +-------------------------*/
/*
* @brief This function records in-app purchases for Android devices in the Fuse system.
* @details Call this function directly after an in-app purchase is made once it has been confirmed that the transaction has occurred successfully.  
* 
* @param purchaseState [FusePurchaseState] An object set to the purchase details for easy parsing by the fuse system (PURCHASED=0, CANCELED=1, REFUNDED=2)
* @param purchaseToken [const char*] The token from the purchase transaction
* @param productId [const char*] The product identifier
* @param orderId [const char*] The order identifier
* @param purchaseTime [long] Timestamp of the purchase
* @param developerPayload [const char*] Developer payload from the purchase
* @param price [const double*] Purchase price.  Note: this is a reference to a double value
* @param currency [const char*] Currency code
*
*/
void FuseSDKRegisterInAppPurchaseAndroid(FusePurchaseStateAndroid purchaseState, const char* purchaseToken, const char* productId, const char* orderId, long purchaseTime, const char* developerPayload, const double* price, const char* currency) run_on_os_thread

/*
* @brief This function records in-app purchases for iOS devices in the Fuse system.
* @details Call this function directly after an in-app purchase is made once it has been confirmed that the transaction has occurred successfully.  
* 
* @param purchaseState [FusePurchaseState] An object set to the purchase details for easy parsing by the fuse system (PURCHASED=0, CANCELED=1, REFUNDED=2)
* @param receiptData [const char*] The receipt from the purchase transaction
* @param recieptDataLength [int] the size of the receipt data
* @param price [const double*] Purchase price.  Note: this is a reference to a double value
* @param currency [const char*] Currency code
* @param productId [const char*] The product identifier
* @param transacationID [const char*] The transaction ID of the purchase
 @see FuseDelegate::purchaseVerification:TransactionID:OriginalTransactionID: for more information on the \<FuseDelegate\> callback indicating whether the transaction was verified by Apple's servers
*
*/
void FuseSDKRegisterInAppPurchaseiOS(FusePurchaseStateiOS purchaseState, const char* receiptData, int recieptDataLength, double* price, const char* currency, const char* productID, const char* transactionID) run_on_os_thread

/*!
 @brief This method records purchases of virtual goods.

 @details Call this method directly after a virtual good has been purchased successfully.

 @param virtualGoodsID [int] The ID of the virtual good as defined in the Fuse Dashboard.
 @param purchaseAmount [int] The amount of currency spent on the virtual good.
 @param currencyID [int] The ID of the currency used as defined on the Fuse Dashboard.
 @since Fuse SDK version 2.1.0
 */
void FuseSDKRegisterVirtualGoodsPurchase(int virtualGoodsID, int purchaseAmount, int currencyID) run_on_os_thread

/**+---------------+
// | Notifications |
// +---------------*/
/*
* @brief This function is used to display in-game Fuse notifications
* @details The Fuse notification system can be used to deliver textual system notifications to your users, promoting features of your application for example or promoting another application.  
* In addition, the Fuse system automatically configures notifications to rate your application in the App Store as well as upgrade your application when a new version is released.  
* It is best to call this function early in the application flow of your game, preferably on your main menu.  Optionally, an action can be assigned to the closing of the dialog to notify the 
* application that an internal action should be taken.  In this case, the FUSESDK_NOTIFICATION_ACTION callback function would be called when the dialog is closing (only if the affirmative button is pressed).
*
* @see FUSESDK_NOTIFICATION_ACTION in FuseSDK/docs/Callbacks.txt for more information on handling internal actions
*/
void FuseSDKDisplayNotifications() run_on_os_thread


/**+------------+
// | More games |
// +------------*/
/*
* @brief This function is use to display the "More Games" section
* @details The "More Games" section can be used to showcase your own games or all games within your network or the whole Fuse network.  To call the "More Games" overlay, simply call:
*/
void FuseSDKDisplayMoreGames() run_on_os_thread


/**+--------+
// | Gender |
// +--------*/
/*
* @brief This function registers a gender for the user
* @details If a gender is known or suspected for a user, call this function to assign a gender to the user.
*
* The enumerated type definition is as follows:
* @code
public enum FuseGender 
{
    FUSE_GENDER_UNKNOWN(0),
    FUSE_GENDER_MALE(1),
    FUSE_GENDER_FEMALE(2);
} 
* @endcode
*
* @param gender [int] The enumerated gender of the user
*/
void FuseSDKRegisterGender(int gender) run_on_os_thread


/**+---------------+
// | Account Login |
// +---------------*/
/*
* @brief Facebook account registration
* @details Uniquely track a user across devices by passing Facebook login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.  
* Use this version if the gender of the player is known.
* 
* To call this function:
* 
* @code
 
    FuseSDKFacebookLogin("facebook_id", "coolAlias", "23478bfb8723312323a29");
 
* @endcode
*
* If required, a callback is sent to FUSESDK_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param facebookId [const char*] This is the account id of the user signed in to Facebook (e.g. 122611572) 
* @param name [const char*] The first and last name of the user (i.e. "Jon Jovi").  Can be @"" or null if unknown.
* @param accessToken [const char*] This is the access token generated if a user signs in to a facebook app on the device (can be "" or null if not available)
* @see FUSESDK_ACCOUNT_LOGIN_COMPLETE in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
*/	
void FuseSDKFacebookLogin(const char* facebookId, const char* name, const char* accessToken) run_on_os_thread

/*
* @brief Twitter account registration
* @details Uniquely track a user across devices by passing Twitter login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* To call this function:
* 
* @code
 
    FuseSDK.twitterLogin("twit_id");
 
* @endcode
* 
* If required, a callback is sent to FUSESDK_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
*
* @param twitterId [const char*] This is the account id of the user signed in to Twitter
* @see FUSESDK_ACCOUNT_LOGIN_COMPLETE in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
*/
void FuseSDKTwitterLogin(const char* twitterId) run_on_os_thread

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* To call this function:
* 
* @code
 
    FuseSDK deviceLogin("Geronimo");
 
* @endcode
* 
* If required, a callback is sent to FUSESDK_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [const char*] The alias or 'handle' of the user
* @param fuseCallback [FuseCallback] The callback object 
* @see FUSESDK_ACCOUNT_LOGIN_COMPLETE in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseSDKGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseSDKDeviceLogin(const char* alias) run_on_os_thread

/*
* @brief Fuse account registration
* @details Uniquely track a user across devices by passing Fuse login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* The Fuse ID is a nine-digit numeric value that is unique to every signed-in player (but not unique to device).  
* Note that this function required UI elements to allow a user to provide credentials to log in, and is currently not implemented.
* 
* To call this function:
* 
* @code
 
    FuseSDK.fuseLogin:("012345678");
 
* @endcode
* 
* If required, a callback is sent to FUSESDK_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param fuseId [const char*] This is the account id of the user signed in to the Fuse system
* @param alias [const char*] The alias or 'handle' of the user
* @see FUSESDK_ACCOUNT_LOGIN_COMPLETE in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseSDKGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseSDKFuseLogin(const char* fuseId, const char* alias) run_on_os_thread

/*!
* @brief Game Center account registration
* @details Uniquely track a user across devices by passing Game Center login information of a user.  This system can be used in conjunction with the 'set' and 'get' 
* game data to persist per-user information across devices.
*
* To register the account information, pass the Game Center object as soon as the user has been confirmed to have logged in.
* 
@see startSession:Delegate: to see how to register a \<FuseDelegate\> object to receive the optional callback
* @see FUSESDK_ACCOUNT_LOGIN_COMPLETE in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
*/
void FuseSDKGameCenterLogin() run_on_os_thread

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* If required, a callback is sent to FUSESDK_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [const char*] The alias or 'handle' of the user
* @param accessToken [const char*] This access token is obtained by asking the user permission with scope: "oauth2:https://www.googleapis.com/auth/plus.login"  
* @see FuseSDKGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseSDKGooglePlayLogin(const char* alias, const char* token) run_on_os_thread

/*
* @brief Get the original account ID used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the original parameter used to create the user account session.
* 
* @retval [const char*] The original account ID used to sign in to the fuse system (for instance 122611572 if the user is signed in using Facebook)
* @see FuseSDKGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseSDKGetOriginalAccountId() run_on_os_thread

/*
* @brief Get the original account alias of the user used to log in to the Fuse system
* @details This method returns the original user alias.
*
* @retval [const char*] The user's account alias (i.e. T-Bone300)
* @see FuseSDKGetOriginalAccountId to get the ID associated with the account type
* @see FuseSDKGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseSDKGetOriginalAccountAlias() run_on_os_thread

/*
* @brief Get the original account type used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the type of account used to create the user account session.
* 
* To call this function
* 
* @code

int type = FuseSDKGetOriginalAccountType();
 
// where type corresponds to the following enum:
enum FuseAccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};
    
* @endcode
* 
* @retval [int] The original account type used to sign in to the fuse system (for instance 4 if the user is signed in using Facebook)
* @see FuseSDKGetOriginalAccountId to get the ID associated with the account type
*/
int FuseSDKGetOriginalAccountType() run_on_os_thread

/*
* @brief This function returns the public 'Fuse ID'.
* @details After a user has registered a login for one of the supported services (i.e. Facebook, etc), 
* a 9-digit 'Fuse ID' is generated that uniquely identifies the user.  This ID can be passed between users as a public ID for the 
* Fuse system so that user's can interact (i.e. invite as friends, etc.) without exposing confidential account information.
* 
* @see FuseSDKFacebookLogin: for more information on how to register a login with a Facebook account ID
* @see FuseSDKTwitterLogin: for more information on how to register a login with a Twitter account ID
* @see FuseSDKFuseLogin for more information on how to register a login with a Fuse ID
* @retval [const char*] The 9-digit Fuse ID.  This ID is strictly comprised of integers, but *do not* cast this value to an integer because a valid ID could have leading zeroes.
*/
const char* FuseSDKGetFuseID() run_on_os_thread


/**+---------------+
// | Miscellaneous |
// +---------------*/
/*
* @brief This function returns the amount of times the user has opened the application
* @details Call this function to get the number of times the application has been opened either from the Springboard of system tray (minimized)
*
* @retval [int] The number of times the application has been opened
*/
int FuseSDKgamesPlayed() run_on_os_thread

/*
* @brief This function returns the Fuse API version
* @details Call this function if it is required to know the Fuse API version.  
*
* @retval [const char*] The API version of the form '1.22'
*/
const char* FuseSDKLibraryVersion() run_on_os_thread

/*
* @brief This function indicates whether the application is connected to the internet
* @details This function indicates if the application is connected via wifi or cellular network and connected to the internet. To use this function:
*
* @retval [bool] The connected status of the application
*/
bool FuseSDKConnected() run_on_os_thread

/*
* @brief This function gets the UTC time from the server
* @details To help determine the psuedo-accurate real-world time (i.e. not device time), this function can be called to get the UTC time from the Fuse servers.  
* The date is returned in unix time format (i.e. seconds elapsed since January 1, 1970).  The returned value is only psuedo-accurate in that it does not account 
* for request time and delays - so it is the time on the server when the request was received but not the time when the value returns to the device.  This is generally
* used to prevent time exploits in games where such situations could occur (by a user changing their device time).
* 
* To get the time, it is a two step process.  First a request is made to the API using this function.
* Then, a FUSESDK_TIME_UPDATED callback is triggered in the FuseCallback object with the result.
*
* @see FUSESDK_TIME_UPDATED in FuseSDK/docs/Callbacks.txt to see more information on the account complete callback
* @see http://en.wikipedia.org/wiki/Unix_time for more information on Unix time
* @see http://en.wikipedia.org/wiki/Coordinated_Universal_Time for more information on UTC time
*/
void FuseSDKTimeFromServer() run_on_os_thread


/**+-----------------+
// | Data Opt In/Out |
// +-----------------*/
/*
* @brief This function allows the user to opt-out of being tracked for advertising purposes
* @details Functions that collect data on a user will not send information to the Fuse system if they have opted out.
*
* @param enable [bool] Indicates whether the user is opting out (true = data collection enabled, false = data collection disabled)
*/
void FuseSDKEnableData(bool enable) run_on_os_thread

/**TODO:*/
//bool FuseSDKDataEnabled() run_on_os_thread



/**+-------------------------+
// | Game Configuration Data |
// +-------------------------*/
/*
* @brief This function retrieves server configuration values.
* @details The Fuse API provides a method to store game configuration variables that are provided to the application on start.  
* These are different than "Game Data" values since they are stored on a per-game basis, and not a per-user basis.
* 
* In the Fuse dashboard, navigate to the 'configuration' tab in your game view.  You can edit the "Game Data" section by adding keys 
* and associated data values.  Values can be 256 characters in length and support UTF-8 characters.
* 
* @code
 
    const char* my_val = FuseSDKGetGameConfigurationValue("my_key");
 
    if (my_val != NULL)
    {
		// always check against 'null' before using the value
    }
 
* @endcode
* 
* Values are update in the client each time a session is started from the Springboard or system tray. To find out when values are 
* valid in the device, you can use the FUSESDK_GAME_CONFIGURATION_RECEIVED callback function that indicates when the values are ready to be inspected.
* 
* @code
 
bool has_game_config_returned = false; 
int32 GameConfigReceived(void* systemData, void* userData)
{
    has_game_config_returned = true;
 
    // You can now access your server-side data, either here or somewhere else in your code
    const char* funny_val = FuseSDKGetGameConfigurationValue("not_funny");
}
 
* @endcode
* 
* It is recommended that a default value be present on the device in case the user has not or never connects to the Internet.
* 
* @param key [const char*] This is the key for which the value is requested.
* @retval [const char*] This is the value for the corresponding key.
*/
const char* FuseSDKGetGameConfigurationValue(const char* key) run_on_os_thread

/**+-----------------------------+
// | Specific Event Registration |
// +-----------------------------*/
/*
* @brief Register the user's current level after they level-up
* @details This function can specifically track user levels to more accurately measure application penetration
*
* @param level [int] The player's new level
*/
void FuseSDKRegisterLevel(int level) run_on_os_thread

/*
* @brief Register a change in the current balances of the user's in-app currencies.
* @details To better track the currency levels of your users, this function can be used to keep the system up-to-date as to the levels of currencies across your users.
*
* @param currencyType [int] Enter 1-4, representing up to four different in-app resources.  These values can be set specific to the application.
* @param balance [int] The updated balance of the user
*/ 
void FuseSDKRegisterCurrency(int type, int balance) run_on_os_thread

/*!
 * @brief Register the if the user has parental consent
 * @details This method tracks if parental consent has been obtained
 *
 *
 * @param _consent [bool] If the user has parental consent
 * @since Fuse SDK version 2.1.0
 */
void FuseSDKRegisterParentalConsent(bool enabled) run_on_os_thread

/*!
 * @brief Register an integer value for a custom event that was defined on the Fuse Dashboard
 * @details Tracks integer values for custom events.  
    Note: Custom events can only accept integer values or string values, but not both. If you pass an integer value 
      to an event that only accepts strings, then the value will not be stored on the server.
 *
 * @code

 bool succeeded = FuseSDKRegisterCustomEventInt(1, 42);

 * @endcode
 *
 * @param eventID [int] The ID for the custom event as defined on the Fuse Dashboard
 * @param eventValue [int] The integer value to set for this custom event
 * @retval [bool] Returns true if the custom event accepts integer values
 * @since Fuse SDK version 2.1.0
 */
bool FuseSDKRegisterCustomEventInt(int eventID, int eventValue) run_on_os_thread

/*!
 * @brief Register a string value for a custom event that was defined on the Fuse Dashboard
 * @details Tracks string values for custom events.
    Note: Custom events can only accept integer values or string values, but not both. If you pass a string value
      to an event that only accepts integers, then the value will not be stored on the server.
 *
 * @code

 bool succeeded = FuseSDKRegisterCustomEventString(3, "This is a custom event");

 * @endcode
 *
 * @param eventID [int] The ID for the custom event as defined on the Fuse Dashboard
 * @param eventValue [const char*] A string value for the custom event.  The string can have a maximum of 255 characters
 * @retval [bool] Returns true if the custom event accepts string values
 * @since Fuse SDK version 2.1.0
 */
bool FuseSDKRegisterCustomEventString(int eventID, const char* eventValue) run_on_os_thread




