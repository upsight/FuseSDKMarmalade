/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "FuseAPI_autodefs.h"
#include "s3eEdk.h"
#include "FuseAPI.h"
//Declarations of Init and Term functions
extern s3eResult FuseAPIInit();
extern void FuseAPITerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void FuseAPIStartSession_wrap(const char* key)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIStartSession"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIStartSession, 1, key);
}

static void FuseAPIPauseSession_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIPauseSession"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIPauseSession, 0);
}

static void FuseAPIResumeSession_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIResumeSession"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIResumeSession, 0);
}

static void FuseAPITerminateSession_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPITerminateSession"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPITerminateSession, 0);
}

static void FuseAPIRegisterForPushNotifications_wrap(const char* projectID)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterForPushNotifications"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterForPushNotifications, 1, projectID);
}

static void FuseAPIRegisterEvent_wrap(const char* message)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterEvent"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterEvent, 1, message);
}

static int FuseAPIRegisterEventWithParam_wrap(const char* name, const char* param_name, const char* param_value, const char* variable_name, const double* variable_value)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterEventWithParam"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterEventWithParam, 5, name, param_name, param_value, variable_name, variable_value);
}

static int FuseAPIRegisterEventWithEventData_wrap(const char* name, const char* paramName, const char* paramValue, cfuhash_table_t* eventData)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterEventWithEventData"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterEventWithEventData, 4, name, paramName, paramValue, eventData);
}

static void FuseAPIRegisterEventWithDictionary_wrap(const char* message, cfuhash_table_t* eventData)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterEventWithDictionary"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterEventWithDictionary, 2, message, eventData);
}

static void FuseAPIRegisterInAppPurchase_wrap(FusePurchaseState purchaseState, const char* purchaseToken, const char* productId, const char* orderId, long purchaseTime, const char* developerPayload, const double* price, const char* currency)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterInAppPurchase"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterInAppPurchase, 8, purchaseState, purchaseToken, productId, orderId, purchaseTime, developerPayload, price, currency);
}

static void FuseAPICheckAdAvailable_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPICheckAdAvailable"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPICheckAdAvailable, 0);
}

static void FuseAPIShowAd_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIShowAd"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIShowAd, 0);
}

static void FuseAPIDisplayNotifications_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIDisplayNotifications"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIDisplayNotifications, 0);
}

static void FuseAPIDisplayMoreGames_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIDisplayMoreGames"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIDisplayMoreGames, 0);
}

static void FuseAPIRegisterGender_wrap(int gender)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterGender"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterGender, 1, gender);
}

static void FuseAPIFacebookLogin_wrap(const char* facebookId, const char* name, const char* accessToken)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIFacebookLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIFacebookLogin, 3, facebookId, name, accessToken);
}

static void FuseAPITwitterLogin_wrap(const char* twitterId)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPITwitterLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPITwitterLogin, 1, twitterId);
}

static void FuseAPIDeviceLogin_wrap(const char* alias)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIDeviceLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIDeviceLogin, 1, alias);
}

static void FuseAPIFuseLogin_wrap(const char* fuseId, const char* alias)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIFuseLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIFuseLogin, 2, fuseId, alias);
}

static void FuseAPIGameCenterLogin_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGameCenterLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGameCenterLogin, 0);
}

static void FuseAPIGooglePlayLogin_wrap(const char* alias, const char* token)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGooglePlayLogin"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGooglePlayLogin, 2, alias, token);
}

static const char* FuseAPIGetOriginalAccountId_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetOriginalAccountId"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetOriginalAccountId, 0);
}

static const char* FuseAPIGetOriginalAccountAlias_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetOriginalAccountAlias"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetOriginalAccountAlias, 0);
}

static int FuseAPIGetOriginalAccountType_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetOriginalAccountType"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetOriginalAccountType, 0);
}

static const char* FuseAPIGetFuseID_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetFuseID"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetFuseID, 0);
}

static int FuseAPIgamesPlayed_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIgamesPlayed"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIgamesPlayed, 0);
}

static const char* FuseAPILibraryVersion_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPILibraryVersion"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPILibraryVersion, 0);
}

static bool FuseAPIConnected_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIConnected"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIConnected, 0);
}

static void FuseAPITimeFromServer_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPITimeFromServer"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPITimeFromServer, 0);
}

static void FuseAPIEnableData_wrap(bool enable)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIEnableData"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIEnableData, 1, enable);
}

static int FuseAPISetGameData_wrap(const char* key, const char* fuseId, cfuhash_table_t* gameData)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPISetGameData"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPISetGameData, 3, key, fuseId, gameData);
}

static int FuseAPIGetGameData_wrap(const char* key, const char* fuseId, const char** gameDataKeys, int numKeys)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetGameData"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetGameData, 4, key, fuseId, gameDataKeys, numKeys);
}

static void FuseAPIUpdateFriendsListFromServer_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIUpdateFriendsListFromServer"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIUpdateFriendsListFromServer, 0);
}

static FusePlayer* FuseAPIGetFriendsList_wrap(int* numPlayers)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetFriendsList"));
    return (FusePlayer*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetFriendsList, 1, numPlayers);
}

static void FuseAPIGetMailListFromServer_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetMailListFromServer"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetMailListFromServer, 0);
}

static void FuseAPIGetMailListFriendFromServer_wrap(const char* fuseId)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetMailListFriendFromServer"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetMailListFriendFromServer, 1, fuseId);
}

static void FuseAPISetMailAsReceived_wrap(int messageId)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPISetMailAsReceived"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPISetMailAsReceived, 1, messageId);
}

static int FuseAPISendMailWithGift_wrap(const char* fuseId, const char* message, int giftId, int giftAmount)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPISendMailWithGift"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPISendMailWithGift, 4, fuseId, message, giftId, giftAmount);
}

static int FuseAPISendMail_wrap(const char* fuseId, const char* message)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPISendMail"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPISendMail, 2, fuseId, message);
}

static FuseMail* FuseAPIGetMailList_wrap(int* numEntries)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetMailList"));
    return (FuseMail*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetMailList, 1, numEntries);
}

static const char* FuseAPIGetGameConfigurationValue_wrap(const char* key)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIGetGameConfigurationValue"));
    return (const char*)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIGetGameConfigurationValue, 1, key);
}

static void FuseAPIRegisterLevel_wrap(int level)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterLevel"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterLevel, 1, level);
}

static void FuseAPIRegisterCurrency_wrap(int type, int balance)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterCurrency"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterCurrency, 2, type, balance);
}

static void FuseAPIRegisterFlurryView_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterFlurryView"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterFlurryView, 0);
}

static void FuseAPIRegisterFlurryClick_wrap()
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterFlurryClick"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterFlurryClick, 0);
}

static void FuseAPIRegisterTapjoyReward_wrap(int amount)
{
    IwTrace(FUSEAPI_VERBOSE, ("calling FuseAPI func on main thread: FuseAPIRegisterTapjoyReward"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)FuseAPIRegisterTapjoyReward, 1, amount);
}

#define FuseAPIStartSession FuseAPIStartSession_wrap
#define FuseAPIPauseSession FuseAPIPauseSession_wrap
#define FuseAPIResumeSession FuseAPIResumeSession_wrap
#define FuseAPITerminateSession FuseAPITerminateSession_wrap
#define FuseAPIRegisterForPushNotifications FuseAPIRegisterForPushNotifications_wrap
#define FuseAPIRegisterEvent FuseAPIRegisterEvent_wrap
#define FuseAPIRegisterEventWithParam FuseAPIRegisterEventWithParam_wrap
#define FuseAPIRegisterEventWithEventData FuseAPIRegisterEventWithEventData_wrap
#define FuseAPIRegisterEventWithDictionary FuseAPIRegisterEventWithDictionary_wrap
#define FuseAPIRegisterInAppPurchase FuseAPIRegisterInAppPurchase_wrap
#define FuseAPICheckAdAvailable FuseAPICheckAdAvailable_wrap
#define FuseAPIShowAd FuseAPIShowAd_wrap
#define FuseAPIDisplayNotifications FuseAPIDisplayNotifications_wrap
#define FuseAPIDisplayMoreGames FuseAPIDisplayMoreGames_wrap
#define FuseAPIRegisterGender FuseAPIRegisterGender_wrap
#define FuseAPIFacebookLogin FuseAPIFacebookLogin_wrap
#define FuseAPITwitterLogin FuseAPITwitterLogin_wrap
#define FuseAPIDeviceLogin FuseAPIDeviceLogin_wrap
#define FuseAPIFuseLogin FuseAPIFuseLogin_wrap
#define FuseAPIGameCenterLogin FuseAPIGameCenterLogin_wrap
#define FuseAPIGooglePlayLogin FuseAPIGooglePlayLogin_wrap
#define FuseAPIGetOriginalAccountId FuseAPIGetOriginalAccountId_wrap
#define FuseAPIGetOriginalAccountAlias FuseAPIGetOriginalAccountAlias_wrap
#define FuseAPIGetOriginalAccountType FuseAPIGetOriginalAccountType_wrap
#define FuseAPIGetFuseID FuseAPIGetFuseID_wrap
#define FuseAPIgamesPlayed FuseAPIgamesPlayed_wrap
#define FuseAPILibraryVersion FuseAPILibraryVersion_wrap
#define FuseAPIConnected FuseAPIConnected_wrap
#define FuseAPITimeFromServer FuseAPITimeFromServer_wrap
#define FuseAPIEnableData FuseAPIEnableData_wrap
#define FuseAPISetGameData FuseAPISetGameData_wrap
#define FuseAPIGetGameData FuseAPIGetGameData_wrap
#define FuseAPIUpdateFriendsListFromServer FuseAPIUpdateFriendsListFromServer_wrap
#define FuseAPIGetFriendsList FuseAPIGetFriendsList_wrap
#define FuseAPIGetMailListFromServer FuseAPIGetMailListFromServer_wrap
#define FuseAPIGetMailListFriendFromServer FuseAPIGetMailListFriendFromServer_wrap
#define FuseAPISetMailAsReceived FuseAPISetMailAsReceived_wrap
#define FuseAPISendMailWithGift FuseAPISendMailWithGift_wrap
#define FuseAPISendMail FuseAPISendMail_wrap
#define FuseAPIGetMailList FuseAPIGetMailList_wrap
#define FuseAPIGetGameConfigurationValue FuseAPIGetGameConfigurationValue_wrap
#define FuseAPIRegisterLevel FuseAPIRegisterLevel_wrap
#define FuseAPIRegisterCurrency FuseAPIRegisterCurrency_wrap
#define FuseAPIRegisterFlurryView FuseAPIRegisterFlurryView_wrap
#define FuseAPIRegisterFlurryClick FuseAPIRegisterFlurryClick_wrap
#define FuseAPIRegisterTapjoyReward FuseAPIRegisterTapjoyReward_wrap

#endif

s3eResult FuseAPIRegister(FuseAPICallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_FUSEAPI_HASH, FUSEAPI_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult FuseAPIUnRegister(FuseAPICallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_FUSEAPI_HASH, FUSEAPI_CALLBACK_MAX, cbid, fn);
}

void FuseAPIRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[48];
    funcPtrs[0] = (void*)FuseAPIRegister;
    funcPtrs[1] = (void*)FuseAPIUnRegister;
    funcPtrs[2] = (void*)FuseAPIStartSession;
    funcPtrs[3] = (void*)FuseAPIPauseSession;
    funcPtrs[4] = (void*)FuseAPIResumeSession;
    funcPtrs[5] = (void*)FuseAPITerminateSession;
    funcPtrs[6] = (void*)FuseAPIRegisterForPushNotifications;
    funcPtrs[7] = (void*)FuseAPIRegisterEvent;
    funcPtrs[8] = (void*)FuseAPIRegisterEventWithParam;
    funcPtrs[9] = (void*)FuseAPIRegisterEventWithEventData;
    funcPtrs[10] = (void*)FuseAPIRegisterEventWithDictionary;
    funcPtrs[11] = (void*)FuseAPIRegisterInAppPurchase;
    funcPtrs[12] = (void*)FuseAPICheckAdAvailable;
    funcPtrs[13] = (void*)FuseAPIShowAd;
    funcPtrs[14] = (void*)FuseAPIDisplayNotifications;
    funcPtrs[15] = (void*)FuseAPIDisplayMoreGames;
    funcPtrs[16] = (void*)FuseAPIRegisterGender;
    funcPtrs[17] = (void*)FuseAPIFacebookLogin;
    funcPtrs[18] = (void*)FuseAPITwitterLogin;
    funcPtrs[19] = (void*)FuseAPIDeviceLogin;
    funcPtrs[20] = (void*)FuseAPIFuseLogin;
    funcPtrs[21] = (void*)FuseAPIGameCenterLogin;
    funcPtrs[22] = (void*)FuseAPIGooglePlayLogin;
    funcPtrs[23] = (void*)FuseAPIGetOriginalAccountId;
    funcPtrs[24] = (void*)FuseAPIGetOriginalAccountAlias;
    funcPtrs[25] = (void*)FuseAPIGetOriginalAccountType;
    funcPtrs[26] = (void*)FuseAPIGetFuseID;
    funcPtrs[27] = (void*)FuseAPIgamesPlayed;
    funcPtrs[28] = (void*)FuseAPILibraryVersion;
    funcPtrs[29] = (void*)FuseAPIConnected;
    funcPtrs[30] = (void*)FuseAPITimeFromServer;
    funcPtrs[31] = (void*)FuseAPIEnableData;
    funcPtrs[32] = (void*)FuseAPISetGameData;
    funcPtrs[33] = (void*)FuseAPIGetGameData;
    funcPtrs[34] = (void*)FuseAPIUpdateFriendsListFromServer;
    funcPtrs[35] = (void*)FuseAPIGetFriendsList;
    funcPtrs[36] = (void*)FuseAPIGetMailListFromServer;
    funcPtrs[37] = (void*)FuseAPIGetMailListFriendFromServer;
    funcPtrs[38] = (void*)FuseAPISetMailAsReceived;
    funcPtrs[39] = (void*)FuseAPISendMailWithGift;
    funcPtrs[40] = (void*)FuseAPISendMail;
    funcPtrs[41] = (void*)FuseAPIGetMailList;
    funcPtrs[42] = (void*)FuseAPIGetGameConfigurationValue;
    funcPtrs[43] = (void*)FuseAPIRegisterLevel;
    funcPtrs[44] = (void*)FuseAPIRegisterCurrency;
    funcPtrs[45] = (void*)FuseAPIRegisterFlurryView;
    funcPtrs[46] = (void*)FuseAPIRegisterFlurryClick;
    funcPtrs[47] = (void*)FuseAPIRegisterTapjoyReward;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[48] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("FuseAPI", funcPtrs, sizeof(funcPtrs), flags, FuseAPIInit, FuseAPITerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int FuseAPIStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&FuseAPIRegisterExt;
    return 0;
}

int g_FuseAPIVal = FuseAPIStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    FuseAPIRegisterExt();
}
#endif

#endif
