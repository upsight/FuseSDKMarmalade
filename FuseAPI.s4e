# FuseAPI extension for Marmalade

callbacks 
include:
#include <s3eTypes.h>

// FuseAPI callbacks available for registering
enum FuseAPICallback
{
	FUSEAPI_SESSION_STARTED,
	FUSEAPI_SESSION_LOGIN_ERROR,
	FUSEAPI_AD_AVAILABILITY_RESPONSE,
	FUSEAPI_AD_WILL_CLOSE,
	FUSEAPI_AD_DISPLAYED,
	FUSEAPI_AD_CLICKED,
	FUSEAPI_NOTIFICATION_ACTION,
	FUSEAPI_ACCOUNT_LOGIN_COMPLETE,
	FUSEAPI_TIME_UPDATED,
	FUSEAPI_GAME_DATA_RECEIVED,
	FUSEAPI_GAME_DATA_ERROR,
	FUSEAPI_GAME_DATASET_ACKNOWLEDGED,
	FUSEAPI_FRIENDSLIST_UPDATED,
	FUSEAPI_FRIENDSLIST_ERROR,
	FUSEAPI_MAILLIST_RECEIVED,
	FUSEAPI_MAIL_ERROR,
	FUSEAPI_MAILLIST_ERROR,
	FUSEAPI_MAIL_ACKNOWLEDGED,
	FUSEAPI_GAME_CONFIGURATION_RECEIVED,
	FUSEAPI_CALLBACK_MAX,
};

// Account types for account login callback
enum AccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};

// purchase state for registering in-app purchases
enum PurchaseState 
{ 
	PURCHASED = 0, 
	CANCELED = 1, 
	REFUNDED = 2,
};

// used to register gender
enum Gender 
{
    FUSE_GENDER_UNKNOWN = 0,
    FUSE_GENDER_MALE = 1,
    FUSE_GENDER_FEMALE = 2,
};

// Game Values from game data
struct GameValue
{
	bool isBinary;
	const char* key;
	const char* value;
};

// Fuse Event status
enum FuseEvent
{
	FUSE_EVENT_OK = 0, 
	FUSE_EVENT_BAD_VAL = 1,   // the user is not connected to the internet
	FUSE_EVENT_NULL_PARAMETER = 2,
};

functions:

/**+------------------+
// | Session Creation |
// +------------------*/
/*	
* @brief This function is used to initiate all communication with the Fuse system (and register a FuseCallback)
* @details The startSession function is used to bootstrap all communications with the Fuse system. This should be called at the cold start of the application (application onCreate() method or the main activity onCreate() method).
*
* When a session has been established by Fuse system, a FUSEAPI_SESSION_STARTED or FUSEAPI_SESSION_LOGIN_ERROR callback will be sent to the registered callback object
*
* @param key [String] This is the 36-character API key assigned by the Fuse system.  Your API key is generated when you add your App to the Fuse dashboard system.  It can be found in the configuration tab in a specific game, or in the "Integrate API" section of the dashboard.  The API key is a 36-digit unique ID of the form 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'.
*
* in FuseAPI/docs/Callbacks.txt:
* @see FUSEAPI_SESSION_STARTED for more information on the callback function
* @see FUSEAPI_SESSION_LOGIN_ERROR for more information on handling errors occurred when trying to start a session
*/
void FuseAPIStartSession(const char* key) run_on_os_thread
/*
 internally called by the extension
*/
void FuseAPIPauseSession() run_on_os_thread
/*
 internally called by the extension 
*/
void FuseAPIResumeSession() run_on_os_thread
/*
 internally called by the extension 
*/
void FuseAPITerminateSession() run_on_os_thread
/*
* @brief This function is used to Setup Google Cloud Messaging service for this app.  
* @details To use this function you must have registered for GCM through Google's API portal: https://code.google.com/apis/console.  A good explanation of GCM can be found here:
* http://developer.android.com/google/gcm/gs.html.
*
* @param GCM_Project_Number [String] This is the Project Number obtained after registering for GCM through Google's portal.
*/
void FuseAPIRegisterForPushNotifications(const char* projectID) run_on_os_thread


/**+-----------------+
// | Analytics Event |
// +-----------------*/
/*
* @brief This function is used to register a named event in the Fuse system.
* @details This function logs the time and frequency of an event within a given game session.  The input string can be anything that is relevant to the design of the game but should be easily understandable when read by users in the Fuse system.
* 
* It is advisable to avoid recording events at a high rate as this could negatively impact both application and server performance.  
* For example, a good practice would be to issue an event at the start of a level (i.e. 'Level 1') or when a purchase is made.  
* It is not advised to issue any event in each draw loop as this would create a tremendous amount of overhead and server traffic.
*
* The maximum length of a registered event is 256 characters, and each application is limited to a maximum 256 separate named events.
*
* An example call would be:
*
* @code
	FuseAPIRegisterEvent("Level 1 Started");
* @endcode
*
* @param event [String] The event name to be logged
*/
void FuseAPIRegisterEvent(const char* message) run_on_os_thread

/*
* @brief This function will send a named event (with values) to the Fuse system for tracking
* @details This function only allows one variable name and value to be sent.
*
* @code
        
// with variables
rtn = FuseAPIRegisterEventWithParam("Levels", "Level", "1", "Coins", 68);
     
// with no variables
rtn = FuseAPIRegisterEventWithParam("Levels", "Level", "3", null, null);
     
// with no parameters (You can also just use FuseAPIRegisterEvent(const char* message) in this case
rtn = FuseAPIRegisterEventWithParam("Session Pause", null, null, null, null);
     
* @endcode
*
* @param name [const char*] The event group name (i.e. "Levels")
* @param param_name [const char*] The event parameter name (i.e. "Level")
* @param param_value [const char*] The event parameter value (i.e. "1")
* @param variable_name [const char*] The name of the variable being logged (i.e. "Coins")
* @param variable_value [const double*] A reference to the value of the event being logged (i.e. 10)
* @retval FuseEvent Indicates whether the event information is valid.  Corresponds to FuseEvent enumeration.
*/
int FuseAPIRegisterEventWithParam(const char* name, const char* param_name, const char* param_value, const char* variable_name, const double* variable_value) run_on_os_thread

/**TODO: pass in hash table*/
//void FuseAPIRegisterEvent(const char* name, const char* paramName, const char* paramValue, HashTable<String,Number> eventData) run_on_os_thread
//void FuseAPIRegisterEventWithDictionary(const char* message, HashTable<String,String> eventData) run_on_os_thread


/**+-------------------------+
// | In-App Purchase Logging |
// +-------------------------*/
/*
* @brief This function records in-app purchases in the Fuse system.
* @details Call this function directly after an in-app purchase is made once it has been confirmed that the transaction has occurred successfully.  
* 
* @param purchaseState [PurchaseState] An object set to the purchase details for easy parsing by the fuse system (PURCHASED=0, CANCELED=1, REFUNDED=2)
* @param purchaseToken [const char*] The token from the purchase transaction
* @param productId [const char*] The product identifier
* @param productId [const char*] The product identifier
* @param orderId [const char*] The order identifier
* @param purchaseTime [long] Timestamp of the purchase
* @param developerPayload [const char*] Developer payload from the purchase
* @param price [const double*] Purchase price
* @param currency [const char*] Currency code
*
*/
void FuseAPIRegisterInAppPurchase(PurchaseState purchaseState, const char* purchaseToken, const char* productId, const char* orderId, long purchaseTime, const char* developerPayload, const double* price, const char* currency) run_on_os_thread


/**+-----------------------+
// | Fuse Interstitial Ads |
// +-----------------------*/
/*
* @brief This function indicates whether an ad is available to be shown to the user
* @details This function is optional and can be used to test if an ad is available in the Fuse system before attempting to show an ad to the user.  
* If an ad is shown (using showAdWithDelegate:) without an ad unit available, the window will be dismissed.  
*     
* The response to this function is sent using the FUSEAPI_AD_AVAILABILITY_RESPONSE callback.  See FuseAPI/docs/Callbacks.txt for more details
*
*/
void FuseAPICheckAdAvailable() run_on_os_thread
/*
* @brief This function is used to display a full-screen interstitial ad.
*
* The following callbacks are available with this function: FUSEAPI_AD_WILL_CLOSE, FUSEAPI_AD_DISPLAYED, FUSEAPI_AD_CLICKED
* See FuseAPI/docs/Callbacks.txt for more details
*/
void FuseAPIShowAd() run_on_os_thread


/**+---------------+
// | Notifications |
// +---------------*/
/*
* @brief This function is used to display in-game Fuse notifications
* @details The Fuse notification system can be used to deliver textual system notifications to your users, promoting features of your application for example or promoting another application.  
* In addition, the Fuse system automatically configures notifications to rate your application in the App Store as well as upgrade your application when a new version is released.  
* It is best to call this function early in the application flow of your game, preferably on your main menu.  Optionally, an action can be assigned to the closing of the dialog to notify the 
* application that an internal action should be taken.  In this case, the FUSEAPI_NOTIFICATION_ACTION callback function would be called when the dialog is closing (only if the affirmative button is pressed).
*
* @see FUSEAPI_NOTIFICATION_ACTION in FuseAPI/docs/Callbacks.txt for more information on handling internal actions
*/
void FuseAPIDisplayNotifications() run_on_os_thread


/**+------------+
// | More games |
// +------------*/
/*
* @brief This function is use to display the "More Games" section
* @details The "More Games" section can be used to showcase your own games or all games within your network or the whole Fuse network.  To call the "More Games" overlay, simply call:
*/
void FuseAPIDisplayMoreGames() run_on_os_thread


/**+--------+
// | Gender |
// +--------*/
/*
* @brief This function registers a gender for the user
* @details If a gender is known or suspected for a user, call this function to assign a gender to the user.
*
* The enumerated type definition is as follows:
* @code
public enum Gender 
{
    FUSE_GENDER_UNKNOWN(0),
    FUSE_GENDER_MALE(1),
    FUSE_GENDER_FEMALE(2);
} 
* @endcode
*
* @param gender [int] The enumerated gender of the user
*/
void FuseAPIRegisterGender(int gender) run_on_os_thread


/**+---------------+
// | Account Login |
// +---------------*/
/*
* @brief Facebook account registration
* @details Uniquely track a user across devices by passing Facebook login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.  
* Use this version if the gender of the player is known.
* 
* To call this function:
* 
* @code
 
    FuseAPIFacebookLogin("facebook_id", "coolAlias", "23478bfb8723312323a29");
 
* @endcode
*
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param facebookId [const char*] This is the account id of the user signed in to Facebook (e.g. 122611572) 
* @param name [const char*] The first and last name of the user (i.e. "Jon Jovi").  Can be @"" or null if unknown.
* @param accessToken [const char*] This is the access token generated if a user signs in to a facebook app on the device (can be "" or null if not available)
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
*/	
void FuseAPIFacebookLogin(const char* facebookId, const char* name, const char* accessToken) run_on_os_thread

/*
* @brief Twitter account registration
* @details Uniquely track a user across devices by passing Twitter login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* To call this function:
* 
* @code
 
    FuseAPI.twitterLogin("twit_id");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
*
* @param twitterId [const char*] This is the account id of the user signed in to Twitter
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
*/
void FuseAPITwitterLogin(const char* twitterId) run_on_os_thread

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* To call this function:
* 
* @code
 
    FuseAPI deviceLogin("Geronimo");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [String] The alias or 'handle' of the user
* @param fuseCallback [FuseCallback] The callback object 
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIDeviceLogin(const char* alias) run_on_os_thread

/*
* @brief Fuse account registration
* @details Uniquely track a user across devices by passing Fuse login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* The Fuse ID is a nine-digit numeric value that is unique to every signed-in player (but not unique to device).  
* Note that this function required UI elements to allow a user to provide credentials to log in, and is currently not implemented.
* 
* To call this function:
* 
* @code
 
    FuseAPI.fuseLogin:("012345678");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param fuseId [const char*] This is the account id of the user signed in to the Fuse system
* @param alias [const char*] The alias or 'handle' of the user
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIFuseLogin(const char* fuseId, const char* alias) run_on_os_thread

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [const char*] The alias or 'handle' of the user
* @param accessToken [const char*] This access token is obtained by asking the user permission with scope: "oauth2:https://www.googleapis.com/auth/plus.login"  
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIGooglePlayLogin(const char* alias, const char* token) run_on_os_thread

/*
* @brief Get the original account ID used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the original parameter used to create the user account session.
* 
* @retval [const char*] The original account ID used to sign in to the fuse system (for instance 122611572 if the user is signed in using Facebook)
* @see FuseAPIGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseAPIGetOriginalAccountId() run_on_os_thread

/*
* @brief Get the original account alias of the user used to log in to the Fuse system
* @details This method returns the original user alias.
*
* @retval [const char*] The user's account alias (i.e. T-Bone300)
* @see FuseAPIGetOriginalAccountId to get the ID associated with the account type
* @see FuseAPIGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseAPIGetOriginalAccountAlias() run_on_os_thread

/*
* @brief Get the original account type used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the type of account used to create the user account session.
* 
* To call this function
* 
* @code

int type = FuseAPIGetOriginalAccountType();
 
// where type corresponds to the following enum:
enum AccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};
    
* @endcode
* 
* @retval [int] The original account type used to sign in to the fuse system (for instance 4 if the user is signed in using Facebook)
* @see FuseAPIGetOriginalAccountId to get the ID associated with the account type
*/
int FuseAPIGetOriginalAccountType() run_on_os_thread

/*
* @brief This function returns the public 'Fuse ID'.
* @details After a user has registered a login for one of the supported services (i.e. Facebook, etc), 
* a 9-digit 'Fuse ID' is generated that uniquely identifies the user.  This ID can be passed between users as a public ID for the 
* Fuse system so that user's can interact (i.e. invite as friends, etc.) without exposing confidential account information.
* 
* @see FuseAPIFacebookLogin: for more information on how to register a login with a Facebook account ID
* @see FuseAPITwitterLogin: for more information on how to register a login with a Twitter account ID
* @see FuseAPIFuseLogin for more information on how to register a login with a Fuse ID
* @retval [const char*] The 9-digit Fuse ID.  This ID is strictly comprised of integers, but *do not* cast this value to an integer because a valid ID could have leading zeroes.
*/
const char* FuseAPIGetFuseID() run_on_os_thread


/**+---------------+
// | Miscellaneous |
// +---------------*/
/*
* @brief This function returns the amount of times the user has opened the application
* @details Call this function to get the number of times the application has been opened either from the Springboard of system tray (minimized)
*
* @retval [int] The number of times the application has been opened
*/
int FuseAPIgamesPlayed() run_on_os_thread

/*
* @brief This function returns the Fuse API version
* @details Call this function if it is required to know the Fuse API version.  
*
* @retval [const char*] The API version of the form '1.22'
*/
const char* FuseAPILibraryVersion() run_on_os_thread

/*
* @brief This function indicates whether the application is connected to the internet
* @details This function indicates if the application is connected via wifi or cellular network and connected to the internet. To use this function:
*
* @retval [bool] The connected status of the application
*/
bool FuseAPIConnected() run_on_os_thread

/*
* @brief This function gets the UTC time from the server
* @details To help determine the psuedo-accurate real-world time (i.e. not device time), this function can be called to get the UTC time from the Fuse servers.  
* The date is returned in unix time format (i.e. seconds elapsed since January 1, 1970).  The returned value is only psuedo-accurate in that it does not account 
* for request time and delays - so it is the time on the server when the request was received but not the time when the value returns to the device.  This is generally
* used to prevent time exploits in games where such situations could occur (by a user changing their device time).
* 
* To get the time, it is a two step process.  First a request is made to the API using this function.
* Then, a FUSEAPI_TIME_UPDATED callback is triggered in the FuseCallback object with the result.
*
* @see FUSEAPI_TIME_UPDATED in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see http://en.wikipedia.org/wiki/Unix_time for more information on Unix time
* @see http://en.wikipedia.org/wiki/Coordinated_Universal_Time for more information on UTC time
*/
void FuseAPITimeFromServer() run_on_os_thread


/**+-----------------+
// | Data Opt In/Out |
// +-----------------*/
/*
* @brief This function allows the user to opt-out of being tracked for advertising purposes
* @details Functions that collect data on a user will not send information to the Fuse system if they have opted out.
*
* @param enable [bool] Indicates whether the user is opting out (true = data collection enabled, false = data collection disabled)
*/
void FuseAPIEnableData(bool enable) run_on_os_thread

/**TODO:*/
//bool FuseAPIDataEnabled() run_on_os_thread


/**+----------------+
// | User Game Data |
// +----------------*/
// int return value is the Fuse request ID

/**TODO: handle hashtable and gamevalue*/
//int FuseAPISetGameData(String key, bool isCollection, String fuseId, HashTable<String, GameValue> gameData) run_on_os_thread
//int FuseAPIGetGameData(String key, String fuseId, ArrayList<String> gameData) run_on_os_thread


/**+-------------+
// | Friend List |
// +-------------*/
void FuseAPIUpdateFriendsListFromServer() run_on_os_thread

/**TODO: return a list of Player info*/
//List<Player> FuseAPIGetFriendsList() run_on_os_thread


/**+---------+
// | Gifting |
// +---------*/
void FuseAPIGetMailListFromServer() run_on_os_thread
void FuseAPIGetMailListFriendFromServer(const char* fuseId) run_on_os_thread 
void FuseAPISetMailAsReceived(int messageId) run_on_os_thread
int FuseAPISendMailWithGift(const char* fuseId, const char* message, int giftId, int giftAmount) run_on_os_thread
int FuseAPISendMail(const char* fuseId, const char* message) run_on_os_thread

/**TODO: return mail list*/
//List<Mail> FuseAPIGetMailList(const char* fuseId) run_on_os_thread


/**+-------------------------+
// | Game Configuration Data |
// +-------------------------*/
/*
* @brief This function retrieves server configuration values.
* @details The Fuse API provides a method to store game configuration variables that are provided to the application on start.  
* These are different than "Game Data" values since they are stored on a per-game basis, and not a per-user basis.
* 
* In the Fuse dashboard, navigate to the 'configuration' tab in your game view.  You can edit the "Game Data" section by adding keys 
* and associated data values.  Values can be 256 characters in length and support UTF-8 characters.
* 
* @code
 
    const char* my_val = FuseAPIGetGameConfigurationValue("my_key");
 
    if (my_val != NULL)
    {
		// always check against 'null' before using the value
    }
 
* @endcode
* 
* Values are update in the client each time a session is started from the Springboard or system tray. To find out when values are 
* valid in the device, you can use the FUSEAPI_GAME_CONFIGURATION_RECEIVED callback function that indicates when the values are ready to be inspected.
* 
* @code
 
bool has_game_config_returned = false; 
int32 GameConfigReceived(void* systemData, void* userData)
{
    has_game_config_returned = true;
 
    // You can now access your server-side data, either here or somewhere else in your code
    const char* funny_val = FuseAPIGetGameConfigurationValue("not_funny");
}
 
* @endcode
* 
* It is recommended that a default value be present on the device in case the user has not or never connects to the Internet.
* 
* @param key [const char*] This is the key for which the value is requested.
* @retval [const char*] This is the value for the corresponding key.
*/
const char* FuseAPIGetGameConfigurationValue(const char* key) run_on_os_thread

/**TODO: return a hash map or array of kvps, or just an array of keys?*/
//String[]  FuseAPIGetGameConfigKeys() run_on_os_thread 


/**+-----------------------------+
// | Specific Event Registration |
// +-----------------------------*/
/*
* @brief Register the user's current level after they level-up
* @details This function can specifically track user levels to more accurately measure application penetration
*
* @param level [int] The player's new level
*/
void FuseAPIRegisterLevel(int level) run_on_os_thread

/*
* @brief Register a change in the current balances of the user's in-app currencies.
* @details To better track the currency levels of your users, this function can be used to keep the system up-to-date as to the levels of currencies across your users.
*
* @param currencyType [int] Enter 1-4, representing up to four different in-app resources.  These values can be set specific to the application.
* @param balance [int] The updated balance of the user
*/ 
void FuseAPIRegisterCurrency(int type, int balance) run_on_os_thread

/*
* @brief Register a view of a Flurry video
* @details Track each time a user views a Flurry video.
*/
void FuseAPIRegisterFlurryView() run_on_os_thread

/*
* @brief Register a click on a Flurry video
* @details Track each time a user clicks a Flurry video.
*/
void FuseAPIRegisterFlurryClick() run_on_os_thread

/*
* @brief Register the receipt of a tapjoy reward to the user
* @details Track each time a user is rewarded through an incentivized action using Flurry.
*
* @param amount [int] The total amount of the in-game currency that the user has been awarded by Tapjoy
*/
void FuseAPIRegisterTapjoyReward(int amount) run_on_os_thread







