Fuse API Callback Documentation

In order to receive callbacks from the FuseAPI extension, you must register for callbacks, using 
s3eResult FuseAPIRegister(FuseAPICallback cbid, s3eCallback fn, void* userData);

For example:
FuseAPIRegister(FUSEAPI_ACCOUNT_LOGIN_COMPLETE, &LoginComplete, NULL);

Note that userData is always NULL.

To unregister callbacks, use:
s3eResult FuseAPIUnRegister(FuseAPICallback cbid, s3eCallback fn);

For example:
FuseAPIUnRegister(FUSEAPI_ACCOUNT_LOGIN_COMPLETE, &LoginComplete);

You can register or unregister callbacks at any time during the execution of your program, 
but registration is commonly handled on application initialization and unregistering at termination.

Callback functions are s3eCallbacks, so they have the following structure:
int32 FunctionName(void* systemData, void* userData)

Any extra data from the callback is stored in systemData.  These values are always stored as a struct, according to the definitions listed below.
Here is an example of retrieving parameter info from a FUSEAPI_ACCOUNT_LOGIN_COMPLETE callback:
int32 LoginComplete(void* systemData, void* userData)
{
	// param list as defined in FuseAPI/docs/Callbacks.txt
	struct paramList
	{
		int accountType;
		const char* accountID;
	};
	const paramList* params;
	params = (paramList*)systemData;
	
	// handle results of login

	return 1;
}

Below is the list of callback IDs, how they are triggered, and their parameters:

//-------------------------------------
FUSEAPI_SESSION_STARTED
Response to: a successful FuseAPIStartSession
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_SESSION_LOGIN_ERROR
Response to: a successful FuseAPIStartSession.  See FuseLoginError in FuseAPI.h for error code values.
Params: 
struct paramList
{
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_AD_AVAILABILITY_RESPONSE
Response to: FuseAPICheckAdAvailable. See FuseAdErrors in FuseAPI.h for error code values.
Params:
struct paramList
{
	int available;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_AD_WILL_CLOSE
Response to: User pressing the 'X' close button on an ad
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_AD_DISPLAYED
Response to: When the ad is fully loaded and shown to the user. Only on Android
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_AD_CLICKED
Response to: User clicking on an ad. Only on Android
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_OVERLAY_WILL_CLOSE
Response to: More games overlay closing. Only on iOS
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_NOTIFICATION_ACTION
Response to: Pressing a button on an action.  
You can specify button names and their associated actions through the Dashboard and handle them in this callback.
Params:
struct paramList
{
	const char* action;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_ACCOUNT_LOGIN_COMPLETE
Response to: Logging in to any account (Facebook, Twitter, etc.).  See FuseAccountType in FuseAPI.h for the enumeration of account types
Params: 
struct paramList
{
	int accountType;
	const char* accountID;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_TIME_UPDATED
Response to: FuseAPITimeFromServer
Params:
struct paramList
{
	int timestamp;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_GAME_DATA_RECEIVED
Response to: FuseAPIGetGameData
Params:
struct paramList
{
	cfuhash_table_t* gameData;
	const char* accountID;
	int requestID;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_GAME_DATA_ERROR
Response to: Error in retrieving game data.  See FuseGameDataError in FuseAPI.h for error code values.
Params: 
struct paramList
{
	int requestId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_GAME_DATASET_ACKNOWLEDGED
Response to: Successfully sending a game data set (to be implemented)
Params: 
struct paramList
{
	int requestID;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIEND_ADDED
Response to: This callback is sent after adding a friend through FuseAPIAddFriend
Params: 
struct paramList
{
	const char* fuseId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIEND_REMOVED
Response to: This callback is sent after removing a friend through FuseAPIRemoveFriend
Params: 
struct paramList
{
	const char* fuseId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIEND_ACCEPTED
Response to: This callback is sent after accepting a friend request through FuseAPIAcceptFriend
Params: 
struct paramList
{
	const char* fuseId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIEND_REJECTED
Response to: This callback is sent after rejecting a friend request through FuseAPIRejectFriend
Params: 
struct paramList
{
	const char* fuseId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIENDS_MIGRATED
Response to: This callback is sent after attempting to migrate a Fuse user's friend's list through calling FuseAPIMigrateFriends
See FuseMigrateFriendErrors in FuseAPI.h for error code values
Params: 
struct paramList
{
	const char* fuseId;
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIENDSLIST_UPDATED
Response to: This callback is sent when a local copy of the player's friends list is stored after calling FuseAPIUpdateFriendsListFromServer
At this point, you can call FuseAPIGetFriendsList to get the friends list in the form of an array of FusePlayers
Params: none
//-------------------------------------

//-------------------------------------
FUSEAPI_FRIENDSLIST_ERROR
Response to: Returns a FuseFriendsListError if there was a problem retrieving the friends list from the server. See FuseFriendsListError in FuseAPI.h for error code values.
Params: 
struct paramList
{
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_MAILLIST_RECEIVED
Response to: This callback is sent when a local copy of a mail list is stored after calling FuseAPIGetMailListFromServer or FuseAPIGetMailListFriendFromServer.
Once this callback is received, you can call FuseAPIGetMailList.
Params: 
struct paramList
{
	const char* fuseId;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_MAILLIST_ERROR
Response to: Called when there is an error in retrieving a mail list after calling FuseAPIGetMailListFromServer or FuseAPIGetMailListFriendFromServer.
See FuseMailError in FuseAPI.h for error code values.
Params: 
struct paramList
{
	int error;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_MAIL_ERROR
Response to:  Called when there is an error when FuseAPISendMail or FuseAPISendMailWithGift is called.
See FuseMailError in FuseAPI.h for error code values.
Params: 
struct paramList
{
	int error;
	int requestId;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_MAIL_ACKNOWLEDGED
Response to: Successfully completed FuseAPISendMail or FuseAPISendMailWithGift
Params: 
struct paramList
{
	int messageId;
	const char* fuseID;
	int requestID;
};
//-------------------------------------

//-------------------------------------
FUSEAPI_GAME_CONFIGURATION_RECEIVED
Response to: Successful session start, once game configuration key-value pairs have been retrieved from the server
Params: 
struct paramList
{
	cfuhash_table_t* gameConfig;
};
//-------------------------------------