/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_FUSEAPI_H
#define S3E_EXT_FUSEAPI_H

#include <s3eTypes.h>
#include "cfuhash.h"

// FuseAPI callbacks available for registering
enum FuseAPICallback
{
	FUSEAPI_SESSION_STARTED,
	FUSEAPI_SESSION_LOGIN_ERROR,
	FUSEAPI_AD_AVAILABILITY_RESPONSE,
	FUSEAPI_AD_WILL_CLOSE,
	FUSEAPI_AD_DISPLAYED,
	FUSEAPI_AD_CLICKED,
    FUSEAPI_OVERLAY_WILL_CLOSE,
	FUSEAPI_NOTIFICATION_ACTION,
	FUSEAPI_ACCOUNT_LOGIN_COMPLETE,
	FUSEAPI_TIME_UPDATED,
	FUSEAPI_GAME_DATA_RECEIVED,
	FUSEAPI_GAME_DATA_ERROR,
	FUSEAPI_GAME_DATASET_ACKNOWLEDGED,
	FUSEAPI_FRIENDSLIST_UPDATED,
	FUSEAPI_FRIENDSLIST_ERROR,
	FUSEAPI_MAILLIST_RECEIVED,
	FUSEAPI_MAIL_ERROR,
	FUSEAPI_MAILLIST_ERROR,
	FUSEAPI_MAIL_ACKNOWLEDGED,
	FUSEAPI_GAME_CONFIGURATION_RECEIVED,
    FUSEAPI_PURCHASE_VERIFIED,
	FUSEAPI_CALLBACK_MAX,
};

// Account types for account login callback
enum FuseAccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};

// purchase state for registering in-app purchases
enum FusePurchaseState 
{ 
	PURCHASED = 0, 
	CANCELED = 1, 
	REFUNDED = 2,
};

// Game Values from game data
struct FuseGameValue
{
	bool isBinary;
	const char* value;
};

// Fuse Player information
struct FusePlayer
{
	const char* fuseId;
	const char* alias;
	const char* type;
	const char* accountId;
	int level;
	int pending;
	bool canAttack;
};

struct FuseGift 
{
	int id;
	const char* name;
	const char* url;
	int amount;
};

struct FuseMail
{
	int id;
	const char* alias;
	const char* fuseId;
	const char* message;
	const char* date;
	FuseGift gift;
};

/**
// Fuse Event status
enum FuseEvent
{
	FUSE_EVENT_OK = 0, 
	FUSE_EVENT_BAD_VAL = 1,   // the user is not connected to the internet
	FUSE_EVENT_NULL_PARAMETER = 2,
};

// used to register gender
enum FuseGender 
{
    FUSE_GENDER_UNKNOWN = 0,
    FUSE_GENDER_MALE = 1,
    FUSE_GENDER_FEMALE = 2,
};

// error codes:
enum FuseLoginError 
{
    FUSE_ACCOUNT_NO_ERROR = 0,
    FUSE_ACCOUNT_SERVER_ERROR = 1,
    FUSE_ACCOUNT_NOT_CONNECTED = 2,
    FUSE_ACCOUNT_REQUEST_FAILED = 3,
    FUSE_ACCOUNT_SESSION_FAILURE = 4,
    FUSE_ERROR_XML_PARSE_ERROR = 5,
};

enum FuseAdErrors 
{
    FUSE_AD_NO_ERROR = 0,
    FUSE_AD_NOT_CONNECTED = 1,
};

enum FuseGameDataError 
{
	FUSE_GD_ERROR_NONE = 0, 
    FUSE_GD_ERROR_NO_ACCOUNT = 1,      // the user has not signed in to an online account
    FUSE_GD_ERROR_NOT_CONNECTED = 2,   // the user is not connected to the internet
    FUSE_GD_ERROR_REQUEST_FAILED = 3,  // there was an error in establishing a connection with the server
    FUSE_GD_ERROR_XML_PARSE_ERROR = 4,  // data was received, but there was a problem parsing the xml
};

enum FuseFriendsListError
{
	FUSE_FRIENDS_LIST_NO_ERROR = 0, 
	FUSE_FRIENDS_LIST_SERVER_ERROR = 1,
	FUSE_FRIENDS_LIST_NOT_CONNECTED = 2,   // the user is not connected to the internet
	FUSE_FRIENDS_LIST_REQUEST_FAILED = 3,  // there was an error in establishing a connection with the server
};

enum FuseMailError 
{
	FUSE_MAIL_NO_ERROR = 0, 
	FUSE_MAIL_SERVER_ERROR = 1,
	FUSE_MAIL_NOT_CONNECTED = 2,   // the user is not connected to the internet
	FUSE_MAIL_REQUEST_FAILED = 3,  // there was an error in establishing a connection with the server
};


*/
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the FuseAPI extension is available.
 */
s3eBool FuseAPIAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref FuseAPICallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see FuseAPIUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref FuseAPICallback enum.
 */
s3eResult FuseAPIRegister(FuseAPICallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the FuseAPICallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see FuseAPIRegister
 */
s3eResult FuseAPIUnRegister(FuseAPICallback cbid, s3eCallback fn);

/**+------------------+
// | Session Creation |
// +------------------*/
/*	
* @brief This function is used to initiate all communication with the Fuse system (and register a FuseCallback)
* @details The startSession function is used to bootstrap all communications with the Fuse system. This should be called at the cold start of the application (application onCreate() method or the main activity onCreate() method).
*
* When a session has been established by Fuse system, a FUSEAPI_SESSION_STARTED or FUSEAPI_SESSION_LOGIN_ERROR callback will be sent to the registered callback object
*
* @param key [String] This is the 36-character API key assigned by the Fuse system.  Your API key is generated when you add your App to the Fuse dashboard system.  It can be found in the configuration tab in a specific game, or in the "Integrate API" section of the dashboard.  The API key is a 36-digit unique ID of the form 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'.
*
* in FuseAPI/docs/Callbacks.txt:
* @see FUSEAPI_SESSION_STARTED for more information on the callback function
* @see FUSEAPI_SESSION_LOGIN_ERROR for more information on handling errors occurred when trying to start a session
*/
void FuseAPIStartSession(const char* key);

/*
 internally called by the extension
*/
void FuseAPIPauseSession();

/*
 internally called by the extension 
*/
void FuseAPIResumeSession();

/*
 internally called by the extension 
*/
void FuseAPITerminateSession();

/*
* @brief This function is used to Setup Google Cloud Messaging service for this app.  
* @details To use this function you must have registered for GCM through Google's API portal: https://code.google.com/apis/console.  A good explanation of GCM can be found here:
* http://developer.android.com/google/gcm/gs.html.
*
* @param GCM_Project_Number [String] This is the Project Number obtained after registering for GCM through Google's portal.
*/
void FuseAPIRegisterForPushNotifications(const char* projectID);

/**+-----------------+
// | Analytics Event |
// +-----------------*/
/*
* @brief This function is used to register a named event in the Fuse system.
* @details This function logs the time and frequency of an event within a given game session.  The input string can be anything that is relevant to the design of the game but should be easily understandable when read by users in the Fuse system.
* 
* It is advisable to avoid recording events at a high rate as this could negatively impact both application and server performance.  
* For example, a good practice would be to issue an event at the start of a level (i.e. 'Level 1') or when a purchase is made.  
* It is not advised to issue any event in each draw loop as this would create a tremendous amount of overhead and server traffic.
*
* The maximum length of a registered event is 256 characters, and each application is limited to a maximum 256 separate named events.
*
* An example call would be:
*
* @code
	FuseAPIRegisterEvent("Level 1 Started");
* @endcode
*
* @param event [String] The event name to be logged
*/
void FuseAPIRegisterEvent(const char* message);

/*
* @brief This function will send a named event (with values) to the Fuse system for tracking
* @details This function only allows one variable name and value to be sent.
*
* @code
        
// with variables
rtn = FuseAPIRegisterEventWithParam("Levels", "Level", "1", "Coins", 68);
     
// with no variables
rtn = FuseAPIRegisterEventWithParam("Levels", "Level", "3", null, null);
     
// with no parameters (You can also just use FuseAPIRegisterEvent(const char* message) in this case
rtn = FuseAPIRegisterEventWithParam("Session Pause", null, null, null, null);
     
* @endcode
*
* @param name [const char*] The event group name (i.e. "Levels")
* @param param_name [const char*] The event parameter name (i.e. "Level")
* @param param_value [const char*] The event parameter value (i.e. "1")
* @param variable_name [const char*] The name of the variable being logged (i.e. "Coins")
* @param variable_value [const double*] A reference to the value of the event being logged (i.e. 10)
* @retval FuseEvent Indicates whether the event information is valid.  Corresponds to FuseEvent enumeration.
*/
int FuseAPIRegisterEventWithParam(const char* name, const char* param_name, const char* param_value, const char* variable_name, const double* variable_value);

/*
* @brief This function will send a named event (with values) to the Fuse system for tracking
* @details To log a named event in the fuse system, you can make the following function calls.  Note that any variable value sent will be summed in the Fuse system, while the other parameters will be counted.
*
* @code
      
// with a HashMap
cfuhash_table_t* toAdd = cfuhash_new_with_initial_size(3);

//Note: The value must be a number in string format
cfuhash_put(toAdd, "XP", "45");
cfuhash_put(toAdd, "Coins", "155");
cfuhash_put(toAdd, "Frame Rate", "20.5");
     
rtn = FuseAPIRegisterEventWithEventData("Levels", "Level", "1", toAdd);
     
// with no dictionary
rtn = FuseAPIRegisterEventWithEventData("Completed", "Section", "8", NULL);
     
// with no parameters
rtn = FuseAPIRegisterEventWithEventData("Session Start", NULL, NULL, NULL);
     
* @endcode
*
* @param name [const char*] The event group name (i.e. "Levels")
* @param param_name [const char*] The event parameter name (i.e. "Level")
* @param param_value [const char*] The event parameter value (i.e. "1")
* @param data [cfuhash_table_t*] A list of key value pairs of variable names and values - see the libcfu code in FuseAPI/source/libcfu for more details on this implementation of a hash table
* @retval FuseEvent Indicates whether the event information is valid.  Corresponds to FuseEvent enumeration.
*/
int FuseAPIRegisterEventWithEventData(const char* name, const char* paramName, const char* paramValue, cfuhash_table_t* eventData);

/*
* @brief This function is used to register a named event in the Fuse system.
* @details This function logs the time and frequency of an event within a given game session.  The input string can be anything that is relevant to the 
* design of the game but should be easily understandable when read by users in the Fuse system.
* 
* It is advisable to avoid recording events at a high rate as this could negatively impact both application and server performance.  For example, a good 
* practice would be to issue an event at the start of a level (i.e. 'Level 1') or when a purchase is made.  It is not advised to issue any event in each draw 
* loop as this would create a tremendous amount of overhead and server traffic.
* 
* The maximum length of a registered event is 256 characters, and each application is limited to a maximum 256 separate named events.
* 
* An example call would be:
 
* @code
    cfuhash_table_t* data = cfuhash_new_with_initial_size(2);
    
	//Note: both the key and the value should be strings
	cfuhash_put(data, "points", "5");
	cfuhash_put(data, "status", "value3");
     
    FuseAPIRegisterEventWithDictionary("Level 1 Started", data);
* @endcode
 
* @param event [const char*] The event name to be logged
* @param data [cfuhash_table_t*] A dictionary of values associated with the event - see the libcfu code in FuseAPI/source/libcfu for more details on this implementation of a hash table
* @see FuseAPIRegisterEventWithEventData for more information on registering events
* 
*/
void FuseAPIRegisterEventWithDictionary(const char* message, cfuhash_table_t* eventData);

/**+-------------------------+
// | In-App Purchase Logging |
// +-------------------------*/
/*
* @brief This function records in-app purchases in the Fuse system.
* @details Call this function directly after an in-app purchase is made once it has been confirmed that the transaction has occurred successfully.  
* 
* @param purchaseState [FusePurchaseState] An object set to the purchase details for easy parsing by the fuse system (PURCHASED=0, CANCELED=1, REFUNDED=2)
* @param purchaseToken [const char*] The token from the purchase transaction
* @param productId [const char*] The product identifier
* @param productId [const char*] The product identifier
* @param orderId [const char*] The order identifier
* @param purchaseTime [long] Timestamp of the purchase
* @param developerPayload [const char*] Developer payload from the purchase
* @param price [const double*] Purchase price
* @param currency [const char*] Currency code
*
*/
void FuseAPIRegisterInAppPurchase(FusePurchaseState purchaseState, const char* purchaseToken, const char* productId, const char* orderId, long purchaseTime, const char* developerPayload, const double* price, const char* currency);

/**+-----------------------+
// | Fuse Interstitial Ads |
// +-----------------------*/
/*
* @brief This function indicates whether an ad is available to be shown to the user
* @details This function is optional and can be used to test if an ad is available in the Fuse system before attempting to show an ad to the user.  
* If an ad is shown (using showAdWithDelegate:) without an ad unit available, the window will be dismissed.  
*     
* The response to this function is sent using the FUSEAPI_AD_AVAILABILITY_RESPONSE callback.  See FuseAPI/docs/Callbacks.txt for more details
*
*/
void FuseAPICheckAdAvailable();

/*
* @brief This function is used to display a full-screen interstitial ad.
*
* The following callbacks are available with this function: FUSEAPI_AD_WILL_CLOSE, FUSEAPI_AD_DISPLAYED, FUSEAPI_AD_CLICKED
* See FuseAPI/docs/Callbacks.txt for more details
*/
void FuseAPIShowAd();

/**+---------------+
// | Notifications |
// +---------------*/
/*
* @brief This function is used to display in-game Fuse notifications
* @details The Fuse notification system can be used to deliver textual system notifications to your users, promoting features of your application for example or promoting another application.  
* In addition, the Fuse system automatically configures notifications to rate your application in the App Store as well as upgrade your application when a new version is released.  
* It is best to call this function early in the application flow of your game, preferably on your main menu.  Optionally, an action can be assigned to the closing of the dialog to notify the 
* application that an internal action should be taken.  In this case, the FUSEAPI_NOTIFICATION_ACTION callback function would be called when the dialog is closing (only if the affirmative button is pressed).
*
* @see FUSEAPI_NOTIFICATION_ACTION in FuseAPI/docs/Callbacks.txt for more information on handling internal actions
*/
void FuseAPIDisplayNotifications();

/**+------------+
// | More games |
// +------------*/
/*
* @brief This function is use to display the "More Games" section
* @details The "More Games" section can be used to showcase your own games or all games within your network or the whole Fuse network.  To call the "More Games" overlay, simply call:
*/
void FuseAPIDisplayMoreGames();

/**+--------+
// | Gender |
// +--------*/
/*
* @brief This function registers a gender for the user
* @details If a gender is known or suspected for a user, call this function to assign a gender to the user.
*
* The enumerated type definition is as follows:
* @code
public enum FuseGender 
{
    FUSE_GENDER_UNKNOWN(0),
    FUSE_GENDER_MALE(1),
    FUSE_GENDER_FEMALE(2);
} 
* @endcode
*
* @param gender [int] The enumerated gender of the user
*/
void FuseAPIRegisterGender(int gender);

/**+---------------+
// | Account Login |
// +---------------*/
/*
* @brief Facebook account registration
* @details Uniquely track a user across devices by passing Facebook login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.  
* Use this version if the gender of the player is known.
* 
* To call this function:
* 
* @code
 
    FuseAPIFacebookLogin("facebook_id", "coolAlias", "23478bfb8723312323a29");
 
* @endcode
*
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param facebookId [const char*] This is the account id of the user signed in to Facebook (e.g. 122611572) 
* @param name [const char*] The first and last name of the user (i.e. "Jon Jovi").  Can be @"" or null if unknown.
* @param accessToken [const char*] This is the access token generated if a user signs in to a facebook app on the device (can be "" or null if not available)
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
*/	
void FuseAPIFacebookLogin(const char* facebookId, const char* name, const char* accessToken);

/*
* @brief Twitter account registration
* @details Uniquely track a user across devices by passing Twitter login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* To call this function:
* 
* @code
 
    FuseAPI.twitterLogin("twit_id");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
*
* @param twitterId [const char*] This is the account id of the user signed in to Twitter
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
*/
void FuseAPITwitterLogin(const char* twitterId);

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* To call this function:
* 
* @code
 
    FuseAPI deviceLogin("Geronimo");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [String] The alias or 'handle' of the user
* @param fuseCallback [FuseCallback] The callback object 
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIDeviceLogin(const char* alias);

/*
* @brief Fuse account registration
* @details Uniquely track a user across devices by passing Fuse login information of a user.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user information across devices.
* 
* The Fuse ID is a nine-digit numeric value that is unique to every signed-in player (but not unique to device).  
* Note that this function required UI elements to allow a user to provide credentials to log in, and is currently not implemented.
* 
* To call this function:
* 
* @code
 
    FuseAPI.fuseLogin:("012345678");
 
* @endcode
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param fuseId [const char*] This is the account id of the user signed in to the Fuse system
* @param alias [const char*] The alias or 'handle' of the user
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIFuseLogin(const char* fuseId, const char* alias);

/*!
* @brief Game Center account registration
* @details Uniquely track a user across devices by passing Game Center login information of a user.  This system can be used in conjunction with the 'set' and 'get' 
* game data to persist per-user information across devices.
*
* To register the account information, pass the Game Center object as soon as the user has been confirmed to have logged in.
* 
@see startSession:Delegate: to see how to register a \<FuseDelegate\> object to receive the optional callback
* @see FUSEAPI_ACCOUNT_LOGIN_COMPLETE in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
*/
void FuseAPIGameCenterLogin();

/*
* @brief Account registration using the unique device identifier
* @details Uniquely track a user based upon their device identifier.  
* This system can be used in conjunction with the 'set' and 'get' game data to persist per-user. 
* However, this system cannot track users across devices since it is tied to a device.  
* The main benefit to using this call to "log" a user in to the system is to avoid any other sign-in (like Facebook or Twitter).
* 
* If required, a callback is sent to FUSEAPI_ACCOUNT_LOGIN_COMPLETE (if registered) indicating that the Fuse system has received the login information.
* 
* @param alias [const char*] The alias or 'handle' of the user
* @param accessToken [const char*] This access token is obtained by asking the user permission with scope: "oauth2:https://www.googleapis.com/auth/plus.login"  
* @see FuseAPIGetFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPIGooglePlayLogin(const char* alias, const char* token);

/*
* @brief Get the original account ID used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the original parameter used to create the user account session.
* 
* @retval [const char*] The original account ID used to sign in to the fuse system (for instance 122611572 if the user is signed in using Facebook)
* @see FuseAPIGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseAPIGetOriginalAccountId();

/*
* @brief Get the original account alias of the user used to log in to the Fuse system
* @details This method returns the original user alias.
*
* @retval [const char*] The user's account alias (i.e. T-Bone300)
* @see FuseAPIGetOriginalAccountId to get the ID associated with the account type
* @see FuseAPIGetOriginalAccountType to get the type associated with the account ID
*/
const char* FuseAPIGetOriginalAccountAlias();

/*
* @brief Get the original account type used to log in to the Fuse system that corresponds to the Fuse ID
* @details This function returns the type of account used to create the user account session.
* 
* To call this function
* 
* @code

int type = FuseAPIGetOriginalAccountType();
 
// where type corresponds to the following enum:
enum FuseAccountType
{
	NONE = 0,
	GAMECENTER = 1,
	FACEBOOK = 2,
	TWITTER = 3,
	OPENFEINT = 4,
	USER = 5,
	EMAIL = 6,
	DEVICE_ID = 7,
	GOOGLE_PLAY = 8,
};
    
* @endcode
* 
* @retval [int] The original account type used to sign in to the fuse system (for instance 4 if the user is signed in using Facebook)
* @see FuseAPIGetOriginalAccountId to get the ID associated with the account type
*/
int FuseAPIGetOriginalAccountType();

/*
* @brief This function returns the public 'Fuse ID'.
* @details After a user has registered a login for one of the supported services (i.e. Facebook, etc), 
* a 9-digit 'Fuse ID' is generated that uniquely identifies the user.  This ID can be passed between users as a public ID for the 
* Fuse system so that user's can interact (i.e. invite as friends, etc.) without exposing confidential account information.
* 
* @see FuseAPIFacebookLogin: for more information on how to register a login with a Facebook account ID
* @see FuseAPITwitterLogin: for more information on how to register a login with a Twitter account ID
* @see FuseAPIFuseLogin for more information on how to register a login with a Fuse ID
* @retval [const char*] The 9-digit Fuse ID.  This ID is strictly comprised of integers, but *do not* cast this value to an integer because a valid ID could have leading zeroes.
*/
const char* FuseAPIGetFuseID();

/**+---------------+
// | Miscellaneous |
// +---------------*/
/*
* @brief This function returns the amount of times the user has opened the application
* @details Call this function to get the number of times the application has been opened either from the Springboard of system tray (minimized)
*
* @retval [int] The number of times the application has been opened
*/
int FuseAPIgamesPlayed();

/*
* @brief This function returns the Fuse API version
* @details Call this function if it is required to know the Fuse API version.  
*
* @retval [const char*] The API version of the form '1.22'
*/
const char* FuseAPILibraryVersion();

/*
* @brief This function indicates whether the application is connected to the internet
* @details This function indicates if the application is connected via wifi or cellular network and connected to the internet. To use this function:
*
* @retval [bool] The connected status of the application
*/
bool FuseAPIConnected();

/*
* @brief This function gets the UTC time from the server
* @details To help determine the psuedo-accurate real-world time (i.e. not device time), this function can be called to get the UTC time from the Fuse servers.  
* The date is returned in unix time format (i.e. seconds elapsed since January 1, 1970).  The returned value is only psuedo-accurate in that it does not account 
* for request time and delays - so it is the time on the server when the request was received but not the time when the value returns to the device.  This is generally
* used to prevent time exploits in games where such situations could occur (by a user changing their device time).
* 
* To get the time, it is a two step process.  First a request is made to the API using this function.
* Then, a FUSEAPI_TIME_UPDATED callback is triggered in the FuseCallback object with the result.
*
* @see FUSEAPI_TIME_UPDATED in FuseAPI/docs/Callbacks.txt to see more information on the account complete callback
* @see http://en.wikipedia.org/wiki/Unix_time for more information on Unix time
* @see http://en.wikipedia.org/wiki/Coordinated_Universal_Time for more information on UTC time
*/
void FuseAPITimeFromServer();

/**+-----------------+
// | Data Opt In/Out |
// +-----------------*/
/*
* @brief This function allows the user to opt-out of being tracked for advertising purposes
* @details Functions that collect data on a user will not send information to the Fuse system if they have opted out.
*
* @param enable [bool] Indicates whether the user is opting out (true = data collection enabled, false = data collection disabled)
*/
void FuseAPIEnableData(bool enable);

/**TODO:*/
//bool FuseAPIDataEnabled() run_on_os_thread


/**+----------------+
// | User Game Data |
// +----------------*/
/*
* @brief This function is used to store per-user persistent game data on the Fuse servers while specifying a mater key value for the key->value pairs in the dictionary.
* @details User information is stored in key->value pairs.  A dictionary is used to store the key value pairs that are passed in to the function.  Keys in the dictionary 
* must be strings, while value data types fall in to two categories: the first being variables that can be cast to strings (int, boolean, float, string), while the second 
* is binary data in the form of a Byte[] object.  There is currently no restriction on the length of the value passed to the server, however if requests become so large they 
* could create problems and this policy will have to be changed.  To receive information on whether the call was made successfully, you can optionally register for the following 
* callbacks: FUSEAPI_GAME_DATA_ERROR and FUSEAPI_GAME_DATASET_ACKNOWLEDGED.  See FuseAPI/docs/Callbacks.txt for more information about callback handlers
* and the structs used to pass information from FuseAPI to callback handlers.
*
* An example of how to create a dictionary and send it to the Fuse system is as follows:
* 
* @code

cfuhash_table_t* gameKeyValuePairs  = cfuhash_new_with_initial_size(2);

FuseGameValue firstValue = {false, "value"};
cfuhash_put(gameKeyValuePairs, "myawesomekey", (void*)&firstKey);

FuseGameValue secondValue = {false, "good"};
cfuhash_put(gameKeyValuePairs, "cat", (void*)&secondValue);

const char* fuseID = FuseAPIGetFuseID();
FuseAPISetGameData( "my data", fuseID, gameKeyValuePairs );
 
* @endcode
* 
* Here are example callback handlers for FUSEAPI_GAME_DATA_ERROR and FUSEAPI_GAME_DATASET_ACKNOWLEDGED:
* 
* @code

int32 GameDataSetAcknowledged(void* systemData, void* userData)
{
	struct paramList
	{
		int requestId;
	};
	paramList* params;
	params = (paramList*)systemData;

	// yah!

	return 1;
}

int32 SetFuseGameDataError(void* systemData, void* userData)
{
	struct paramList
	{
		FuseGameDataError error;
		int requestId;
	};
	paramList* params;
	params = (paramList*)systemData;

	// An error has occurred in setting game data
	// see FuseGameDataError for all error values

	return 1;
}
 
* @endcode 
* 
* @param key [const char*] The master key for this data set. Can be NULL or an empty string
* @param fuseId [const char*] This is the "Fuse ID" of the player for which the data is destine
* @param gameData [cfuhash_table_t*] The data to be stored on the server.  The key is a string, and the value is a FuseGameValue struct.
* @retval [int] Request number.  This is the request ID that can be correlated in gameDataSetAcknowledged to know whether the request was successful.
* @see FuseGameDataError for all possible game data error values
*/
int FuseAPISetGameData(const char* key, const char* fuseId, cfuhash_table_t* gameData);

/**
* @brief This function is used to retrieve per-user persistent game data on the Fuse servers while specifying a master key value for the key->value pairs in the dictionary.
* @details This function allows the specification of a master key to get grouped data.
* 
* @code

const char* keys[2];

keys[0] = "car1";
keys[1] = "car2";
        
// With specifying a subset of information
FuseAPIGetGameData("cars", keys, 2);
 
// Getting all data
FuseAPIGetGameData("cars", NULL, 0);
 
* @endcode
* 
* @param key [const char*] This is the master key name.
* @param keys [const char**] The subset of keys to request from the server.  If NULL all key->value pairs will be returned.
* @param numKeys [int] The number of keys in the key array
* @retval [int] This is the request ID.
*/
int FuseAPIGetGameData(const char* key, const char* fuseId, const char** gameDataKeys, int numKeys);

/**+-------------+
// | Friend List |
// +-------------*/
/*
* @brief Get a the user's friends list
* @details Once a user has signed in with one of the supported account services (for instance, Facebook using facebookLogin), they will have a a friends list which is 
* retrievable from the server.  This list is composed of any friends that they have invited.  This process is asynchronous in that it is required to go the the Fuse 
* servers to retrieve the list.  Therefore, the result is returned in FuseAPIGetFriendsList once the FUSEAPI_FRIENDSLIST_UPDATED callback has been called.
* 
* To request the list:
* 
* @code
 
FuseAPIUpdateFriendsListFromServer();
 
* @endcode
* 
* The result is returned to the FUSEAPI_FRIENDSLIST_UPDATED or FUSEAPI_FRIENDSLIST_ERROR callback handlers.
* eg)
* 
* @code

int32 FriendsListUpdated(void* systemData, void* userData)
{
	int numFriends;
	FusePlayer* playerList = FuseAPIGetFriendsList(&numFriends);

	// Parse Player array
}

int32 FriendsListError(void* systemData, void* userData)
{
	struct paramList
	{
		int error;
	};
	paramList* params;
	params = (paramList*)systemData;

    // An error has occurred in getting the friends list
    // See FuseFriendsListError for more information on all of the possible error codes
}
 
* @endcode
* 
* @see FuseAPIGetFriendsList for more information on getting the local version of the friends list
* @see FuseAPI/docs/Callbacks.txt for more information on the FUSEAPI_FRIENDSLIST_UPDATED and FUSEAPI_FRIENDSLIST_ERROR callbacks
*/
void FuseAPIUpdateFriendsListFromServer();

/*
* @brief This function returns the local friends list of the logged in user
* @details Similar to updateFriendsListFromServer, this function merely returns the local copy of the friends list.  
* The local version of the list can differ from the server version in two ways.  Firstly, friends could accept an invite in another device, 
* clearing both users to show up in each others list.  This server updated is not signaled to the client devices.  Secondly, given that there 
* are propagation delays and HTTP request ordering issues, any "action" (adding a friend, accepting or deleting) will take a few seconds to 
* reach the server. A request to get the server version very close to one of these actions could result in the list not being representative of the final list.
* 
* To get the local friends list:
* 
* @code
	
	// first, retrieve the friends list from the server	
	FuseAPIUpdateFriendsListFromServer();
	
	// once you receive the FUSEAPI_FRIENDSLIST_UPDATED callback, you can query for the friend's list
	int numFriends;
	FusePlayer* local_friends_list = FuseAPIGetFriendsList(&numFriends);
 
* @endcode
* 
* @param numPlayers [int*] Reference to an int variable that will contain the number of friends in the list
* @retval [FusePlayer*] The local version of the user's friends list
* @see FuseAPIUpdateFriendsListFromServer for more information on retrieving the list from the Fuse servers and the format of the friends list dictionary
*/
FusePlayer* FuseAPIGetFriendsList(int* numPlayers);

/**+---------+
// | Gifting |
// +---------*/
/*
* @brief Get the the list of messages (and gifts) sent to the currently signed in user.
* @details This function receives the server list of gifts granted to the user.  This function is asynchronous in that a list will not be returned to the user 
* until it is received by the client from the server, and at that point the FUSEAPI_MAILLIST_RECEIVED is sent, and you can call FuseGetMailList. This function 
* assumes the list being fetched is for a user already signed in using one of the available account services (Twitter, Facebook, etc.) in the Fuse API.
*
* @see FuseFacebookLogin: for more information on how to register a login with a Facebook account ID
* @see FuseTwitterLogin: for more information on how to register a login with a Twitter account ID
* @see FuseLogin: for more information on how to register a login with a Fuse ID
*/
void FuseAPIGetMailListFromServer();

/*
* @brief Get the list of messages (and gifts) sent to another user.
* @details Similar to getMailListFromServer, this function will return the message list for another user (not the user currently signed in).
*
* @param fuseId [const char*] This is the "Fuse ID" of the player for which the list is requested
* @see getMailListFromServer for more information on how to handle the callback for this function
*/
void FuseAPIGetMailListFriendFromServer(const char* fuseId);

/*
* @brief Mark a particular message (or gift) as received by the user
* @details In order to facilitate the handshaking required, this function will mark a particular gift as "used". After this has been called, this message/gift will 
* no longer appear in the list returned by the server. The function should only be called once it has been guaranteed by the client that the item has been credited to the user.
* 
*  This function can only be called for the user currently logged in (therefore the input "Fuse ID" is not able to be specified - assumed to be the same as getFuseID.
*
* @param mailId [int] The mail ID that has been consumed by the client
* @see getFuseID for more information on retrieving the user's Fuse ID once signed in
*/
void FuseAPISetMailAsReceived(int messageId);

/*
* @brief Send a message to a user with a gift attached
* @details This function facilitates gifting another user. A message can be specified along with the unique gift identifier as well as amount.  This function will return 
* a callback if the gifting process was successful or whether an error occurred.  See FUSEAPI_MAIL_ACKNOWLEDGED and FUSEAPI_MAIL_ERROR in FuseAPI/docs/Callbacks.txt
*
* An example call to this function is as follows:
*
* @code
        
int requestID = FuseAPI.sendMailWithGift("123456789", "Meet me behind the school at recess with a gift", 7, 50);
     
* @endcode
* 
* An example of the callback is as follows:
* 
* @code

int32 MailAcknowledged(void* systemData, void* userData)
{
	struct paramList
	{
		int messageId;
		const char* fuseID;
		int requestID;
	};
	paramList* params;
	params = (paramList*)systemData;

	// The message was received successfully
}

int32 MailError(void* systemData, void* userData)
{
	struct paramList
	{
		int error;
		int requestId;
	};
	paramList* params;

	// An error has occurred
    // Refer to FuseMailError for information of the error cases possible    
}
 
* @endcode
* 
* @param fuseId [const char*] This is the "Fuse ID" of the player for which the gift is destined
* @param message [const char*] The message to be sent along with the gift (optional)
* @param giftId [int] The unique gift index that identifies the gift uniquely to the game (should this be an INT?)
* @param giftAmount [int] The quantity of the gift to be awarded to the user (associated with giftId)
* @retval requestID [int] The request ID for the send mail request
* @see FUSEAPI_MAIL_ACKNOWLEDGED for more information on the send gift callback
* @see FUSEAPI_MAIL_ERROR for more information on the error handling for this function
*/
int FuseAPISendMailWithGift(const char* fuseId, const char* message, int giftId, int giftAmount);

/*
* @brief Send a message to a user
* @details This function facilitates messaging another user. This function will return a callback to the FuseCallback object to indicate 
* if the messaging process was successful or whether an error occurred.
*
* An example call to this function is as follows:
*
* @code
        
FuseAPISendMail("123456789", "Meet me behind the school at recess");
     
* @endcode
*
* An example of the callback is as follows:
* 
* @code
 
int32 MailAcknowledged(void* systemData, void* userData)
{
	struct paramList
	{
		int messageId;
		const char* fuseID;
		int requestID;
	};
	paramList* params;
	params = (paramList*)systemData;

	// The message was received successfully
}

int32 MailError(void* systemData, void* userData)
{
	struct paramList
	{
		int error;
		int requestId;
	};
	paramList* params;

	// An error has occurred
    // Refer to FuseMailError for information of the error cases possible    
}
 
* @endcode
*
* @param fuseId [const char*] This is the "Fuse ID" of the player for which the gift is destined
* @param message [const char*] The message to be sent along with the gift (optional)
* @retval requestID [int] The request ID for the send mail request
* @see FUSEAPI_MAIL_ACKNOWLEDGED for more information on the send gift callback
* @see FUSEAPI_MAIL_ERROR for more information on the error handling for this function
*/
int FuseAPISendMail(const char* fuseId, const char* message);

/*
* @brief Get the mail list of a user that has already been retrieved from the server
* @details This list is the local copy, of any user that has already been fetched
* @see getMailListFromServer and getMailListFriendFromServer: for more information on retrieving the mail/gift list from the server
*/
FuseMail* FuseAPIGetMailList(int* numEntries);

/**+-------------------------+
// | Game Configuration Data |
// +-------------------------*/
/*
* @brief This function retrieves server configuration values.
* @details The Fuse API provides a method to store game configuration variables that are provided to the application on start.  
* These are different than "Game Data" values since they are stored on a per-game basis, and not a per-user basis.
* 
* In the Fuse dashboard, navigate to the 'configuration' tab in your game view.  You can edit the "Game Data" section by adding keys 
* and associated data values.  Values can be 256 characters in length and support UTF-8 characters.
* 
* @code
 
    const char* my_val = FuseAPIGetGameConfigurationValue("my_key");
 
    if (my_val != NULL)
    {
		// always check against 'null' before using the value
    }
 
* @endcode
* 
* Values are update in the client each time a session is started from the Springboard or system tray. To find out when values are 
* valid in the device, you can use the FUSEAPI_GAME_CONFIGURATION_RECEIVED callback function that indicates when the values are ready to be inspected.
* 
* @code
 
bool has_game_config_returned = false; 
int32 GameConfigReceived(void* systemData, void* userData)
{
    has_game_config_returned = true;
 
    // You can now access your server-side data, either here or somewhere else in your code
    const char* funny_val = FuseAPIGetGameConfigurationValue("not_funny");
}
 
* @endcode
* 
* It is recommended that a default value be present on the device in case the user has not or never connects to the Internet.
* 
* @param key [const char*] This is the key for which the value is requested.
* @retval [const char*] This is the value for the corresponding key.
*/
const char* FuseAPIGetGameConfigurationValue(const char* key);

/**+-----------------------------+
// | Specific Event Registration |
// +-----------------------------*/
/*
* @brief Register the user's current level after they level-up
* @details This function can specifically track user levels to more accurately measure application penetration
*
* @param level [int] The player's new level
*/
void FuseAPIRegisterLevel(int level);

/*
* @brief Register a change in the current balances of the user's in-app currencies.
* @details To better track the currency levels of your users, this function can be used to keep the system up-to-date as to the levels of currencies across your users.
*
* @param currencyType [int] Enter 1-4, representing up to four different in-app resources.  These values can be set specific to the application.
* @param balance [int] The updated balance of the user
*/ 
void FuseAPIRegisterCurrency(int type, int balance);

/*
* @brief Register a view of a Flurry video
* @details Track each time a user views a Flurry video.
*/
void FuseAPIRegisterFlurryView();

/*
* @brief Register a click on a Flurry video
* @details Track each time a user clicks a Flurry video.
*/
void FuseAPIRegisterFlurryClick();

/*
* @brief Register the receipt of a tapjoy reward to the user
* @details Track each time a user is rewarded through an incentivized action using Flurry.
*
* @param amount [int] The total amount of the in-game currency that the user has been awarded by Tapjoy
*/
void FuseAPIRegisterTapjoyReward(int amount);

S3E_END_C_DECL

#endif /* !S3E_EXT_FUSEAPI_H */
